'                                    : (v[1]>0 ? (v[0]/v[1]*100) : -1);',
'              const places  = isDec2 ? 2 : 1;',
'              const txt     = (showVal>=0) ? (asDec ? showVal.toFixed(places) : (showVal.toFixed(1)+\'%\')) : \'\';',
'              const extra   = asDec ? (" ratio-dec"+(isDec2?" ratio-dec-2":"")) : "";',
'              // Left (total) cell: for Fantasy Production tables, show one decimal then /games',
'              const leftTxt = (TABLES[k].fantasy && idx>0)',
'                ? `${Number.isFinite(v[0]) ? Number(v[0]).toFixed(1) : ""}${v[1]>0?`/${v[1]}`:""}`',
'                : `${v[0]}${v[1]>0?`/${v[1]}`:""}`;',
'              html+=`<td class="total-col${snapCls}" data-num="${v[0]}" data-den="${v[1]}" data-order="${v[0]}">${leftTxt}</td>`+',
'                    `<td class="pct-col${pctExtra}${extra}" data-order="${showVal}">${txt}</td>`;',
'            }',
'          });',
'          html+="</tr>";',
'        });',
'        return html;',
'      }',
'      function htmlForPosition(k, activeWeeks){',
'        const grouped={};',
'        TABLES[k].byPid.forEach((arr, pid)=>{',
'          arr.forEach(tr=>{',
'            const $tds=$(tr).find("td");',
'            const w=$tds.eq(2).text().trim(); if(activeWeeks && !activeWeeks.has(w)) return;',
'            const team=$tds.eq(1).text().trim();',
'            if(!grouped[pid]) grouped[pid]={};',
'            if(!grouped[pid][team]) grouped[pid][team]=Array(TABLES[k].metrics).fill().map(()=>[0,0]);',
'            $tds.filter(".total-col").each(function(i){',
'              const n=+(this.getAttribute("data-num")||0);',
'              const d=+(this.getAttribute("data-den")||0);',
'              grouped[pid][team][i][0]+=n; grouped[pid][team][i][1]+=d;',
'            });',
'          });',
'        });',
'        let html="";',
'        Object.keys(grouped).sort((a,b)=>{',
'          const A=playerMap.get(a)||{}, B=playerMap.get(b)||{};',
'          const lc=(A.last||"").localeCompare(B.last||"", undefined, {sensitivity:"base"}); if(lc!==0) return lc;',
'          return (A.first||"").localeCompare(B.first||"", undefined, {sensitivity:"base"});',
'        }).forEach(pidKey=>{',
'          const display=nameById(pidKey);',
'          Object.keys(grouped[pidKey]).sort().forEach(team=>{',
'            const snapVal = grouped[pidKey][team]?.[0]?.[0] ?? 0;',
'            html+=`<tr data-snaps="${snapVal}"><td class="player-cell" title="${display}"><span class="player-wrap">${display}</span></td><td>${team}</td><td>-</td>`;',
'            grouped[pidKey][team].forEach((v,idx)=>{',
'              const isCalc  = TABLES[k].calcIdxs && TABLES[k].calcIdxs.has(idx);',
'              const pctExtra = ((TABLES[k].snapPctIdx!=null) && idx===0) ? " snap-pct hide-in-pct" : "";',
'              const snapCls  = (idx===0? " snaps-col" : "");',
'              if(isCalc){',
'                const ratio = v[1]>0 ? (v[0]/v[1]) : NaN;',
'                const valStr = Number.isFinite(ratio) ? ratio.toFixed(1) : "";',
'                const ord = Number.isFinite(ratio) ? String(ratio) : "-1";',
'                html+=`<td class="total-col calc-only${snapCls}" data-num="${v[0]}" data-den="${v[1]}" data-order="${ord}">${valStr}</td>`+',
'                      `<td class="pct-col calc-only calc-hide" data-order="${ord}">${valStr}</td>`;',
'              } else {',
'                const isDec  = TABLES[k].decIdxs  && TABLES[k].decIdxs.has(idx);',
'                const isDec2 = TABLES[k].dec2Idxs && TABLES[k].decIdxs.has ? TABLES[k].dec2Idxs.has(idx) : false;',
'                const asDec  = isDec || isDec2;',
'                const ratio   = v[1]>0 ? (v[0]/v[1]) : NaN;',
'                const showVal = asDec ? (Number.isFinite(ratio)? ratio : -1)',
'                                      : (v[1]>0 ? (v[0]/v[1]*100) : -1);',
'                const places  = isDec2 ? 2 : 1;',
'                const txt     = (showVal>=0) ? (asDec ? showVal.toFixed(places) : (showVal.toFixed(1)+\'%\')) : \'\';',
'                const extra   = asDec ? (" ratio-dec"+(isDec2?" ratio-dec-2":"")) : "";',
'                // Left (total) cell: for Fantasy Production tables, show one decimal then /games',
'                const leftTxt = (TABLES[k].fantasy && idx>0)',
'                  ? `${Number.isFinite(v[0]) ? Number(v[0]).toFixed(1) : ""}${v[1]>0?`/${v[1]}`:""}`',
'                  : `${v[0]}${v[1]>0?`/${v[1]}`:""}`;',
'                html+=`<td class="total-col${snapCls}" data-num="${v[0]}" data-den="${v[1]}" data-order="${v[0]}">${leftTxt}</td>`+',
'                      `<td class="pct-col${pctExtra}${extra}" data-order="${showVal}">${txt}</td>`;',
'              }',
'            });',
'            html+="</tr>";',
'          });',
'        });',
'        return html;',
'      }',
'',
'      function prewarmCachesLite(){',
'        if (window.__skipPrewarm) return;',
'        const idle = window.requestIdleCallback || function(cb){ return setTimeout(cb, 50); };',
'        idle(function(){',
'          const awSet=null; const wkey="*";',
'          const teamsArr=[...teams]; let ti=0;',
'          (function stepTeam(){',
'            const chunk=3; let count=0;',
'            while(ti<teamsArr.length && count<chunk){',
'              const tm=teamsArr[ti++];',
'              TEAM_DISPLAY_ORDER.filter(p=>POS_TABLES[p]).forEach(pos=>{',
'                (POS_TABLES[pos]||[]).forEach(k=>{',
'                  const ck=`${k}|${tm}|${wkey}`;',
'                  if(cacheTeam.get(ck)===undefined){ cacheTeam.set(ck, htmlForTeam(k, tm, awSet)); }',
'                });',
'              });',
'              count++;',
'            }',
'            if(ti<teamsArr.length) idle(stepTeam);',
'          })();',
'          let pk=0; const keys=ALL_KEYS.slice();',
'          (function stepPos(){',
'            const chunk=2; let count=0;',
'            while(pk<keys.length && count<chunk){',
'              const k=keys[pk++];',
'              const ck=`${k}|*`;',
'              if(cachePos.get(ck)===undefined){ cachePos.set(ck, htmlForPosition(k, awSet)); }',
'              count++;',
'            }',
'            if(pk<keys.length) idle(stepPos);',
'          })();',
'        });',
'      }',
'',
'      function persistState(){',
'        try {',
'          const mode=filterMode||"";',
'          const player=$("#player-select").val()||"";',
'          const team=$("#team-select").val()||"";',
'          const position=$("#position-select").val()||"";',
'          const weeksSel=$(".week-btn.active").map(function(){return String($(this).data("week"));}).get();',
'          const data={mode,player,team,position,weeksSel,display:displayMode,posShowTop:!!posShowTop,mobileMode,minSnaps:+minSnaps};',
'          localStorage.setItem(LS_KEY, JSON.stringify(data));',
'        } catch(e){}',
'      }',
'',
'      function setRootMode(mode){',
'        const $root=$("#snap-rates");',
'        $root.removeClass("mode-totals mode-pcts mode-both");',
'        if(mode==="totals") $root.addClass("mode-totals");',
'        else if(mode==="pcts") $root.addClass("mode-pcts");',
'        else $root.addClass("mode-both");',
'        $("#show-totals,#show-pcts,#show-both").removeClass("active");',
'        if(mode==="totals") $("#show-totals").addClass("active");',
'        else if(mode==="pcts") $("#show-pcts").addClass("active");',
'        else $("#show-both").addClass("active");',
'        // widths might shift, adjust DT',
'        Object.values(TABLES).forEach(m=>{',
'          if(!m.dt) return;',
'          const $wrap = $(m.id).closest(".table-responsive");',
'          if ($wrap.is(":visible")) m.dt.columns.adjust().draw(false);',
'        });',
'      }',
'',
'      $("#player-select,#team-select,#position-select").on("change", function(){ applyFilters(); persistState(); });',
'      $(".week-filter").on("click",".week-btn", function(){ $(this).toggleClass("active"); applyFilters(); persistState(); });',
'      $("#pick-player").click(function(){ fullReset(); filterMode="player"; $(".filter-btns .btn").removeClass("active"); $(this).addClass("active"); $(".dropdown-container").hide(); $("#player-dropdown").show(); showPositionLimitControls(false); applyFilters(); persistState(); });',
'      $("#pick-team").click(function(){   fullReset(); filterMode="team";   $(".filter-btns .btn").removeClass("active"); $(this).addClass("active"); $(".dropdown-container").hide(); $("#team-dropdown").show();   showPositionLimitControls(false); applyFilters(); persistState(); });',
'      $("#pick-position").click(function(){fullReset(); filterMode="position";$(".filter-btns .btn").removeClass("active"); $(this).addClass("active"); $(".dropdown-container").hide(); $("#position-dropdown").show(); posShowTop=true; $("#pos-top10").addClass("active"); $("#pos-all").removeClass("active"); showPositionLimitControls(true); applyFilters(); persistState(); });',
'',
'      $("#show-totals").click(function(){',
'        displayMode="totals";',
'        setRootMode(displayMode);',
'        if (filterMode==="player") {',
'          if (currentPlayerCat) {',
'            (POS_TABLES[currentPlayerCat]||[]).forEach(k=>{',
'              const m=TABLES[k];',
'              if(m.dt){ m.dt.order([[2,"asc"]]).draw(); updateTotalsKey(k); }',
'            });',
'          }',
'        } else {',
'          Object.values(TABLES).forEach(m=>{',
'            if(m.dt){ m.dt.order(defaultOrderFor(m, filterMode)).draw(); }',
'          });',
'        }',
'        if (filterMode==="position" && currentPosCat) { applyPositionLimit(currentPosCat); }',
'        persistState();',
'      });',
'      $("#show-pcts").click(function(){',
'        displayMode="pcts";',
'        setRootMode(displayMode);',
'        if (filterMode==="player") {',
'          if (currentPlayerCat) {',
'            (POS_TABLES[currentPlayerCat]||[]).forEach(k=>{',
'              const m=TABLES[k];',
'              if(m.dt){ m.dt.order([[2,"asc"]]).draw(); updateTotalsKey(k); }',
'            });',
'          }',
'        } else {',
'          Object.values(TABLES).forEach(m=>{',
'            if(m.dt){ m.dt.order(defaultOrderFor(m, filterMode)).draw(); }',
'          });',
'        }',
'        if (filterMode==="position" && currentPosCat) { applyPositionLimit(currentPosCat); }',
'        persistState();',
'      });',
'      $("#show-both").click(function(){',
'        displayMode="both";',
'        setRootMode(displayMode);',
'        if (filterMode==="player" && currentPlayerCat) {',
'          (POS_TABLES[currentPlayerCat]||[]).forEach(k=>{',
'            const m=TABLES[k];',
'            if(m.dt){ m.dt.order([[2,"asc"]]).draw(); updateTotalsKey(k); }',
'          });',
'        } else {',
'          Object.values(TABLES).forEach(m=>{ if(m.dt) m.dt.order([[2,"desc"]]).draw(); });',
'        }',
'        if (filterMode==="position" && currentPosCat) { applyPositionLimit(currentPosCat); }',
'        persistState();',
'      });',
'',
'      $("#pos-top10").click(function(){',
'        posShowTop=true;  $("#pos-top10").addClass("active"); $("#pos-all").removeClass("active");',
'        if(filterMode==="position" && currentPosCat){',
'          (POS_TABLES[currentPosCat]||[]).forEach(k=>{',
'            clearRowCapKey(k);',
'            const dt = TABLES[k].dt; if(!dt) return;',
'            dt.rows().nodes().to$().css("display","");',
'          });',
'          applyPositionLimit(currentPosCat);',
'          setTimeout(()=>applyPositionLimit(currentPosCat), 0);',
'        }',
'      });',
'      $("#pos-all").click(function(){',
'        posShowTop=false; $("#pos-all").addClass("active"); $("#pos-top10").removeClass("active");',
'        if(filterMode==="position" && currentPosCat){',
'          applyPositionLimit(currentPosCat);',
'          (POS_TABLES[currentPosCat]||[]).forEach(k=>{ applyRowCapKey(k, ROW_CAP_DEFAULT); });',
'        }',
'      });',
'',
'      $("#clear-filters").click(function(){',
'        try{ localStorage.removeItem(LS_KEY); }catch(e){}',
'        $("#player-select,#team-select,#position-select").val(""); $(".week-btn").removeClass("active");',
'        $("#min-snaps-input").val(""); minSnaps=0;',
'        $("#show-totals,#show-pcts,#show-both").removeClass("active"); $("#show-pcts").addClass("active");',
'        displayMode="pcts"; setRootMode(displayMode);',
'        posShowTop=true; $("#pos-top10").addClass("active"); $("#pos-all").removeClass("active"); showPositionLimitControls(false);',
'        filterMode=""; currentPlayerCat=null; currentPosCat=null; $(".filter-btns .btn").removeClass("active"); $(".dropdown-container").hide();',
'        hideAllSections();',
'        Object.values(TABLES).forEach(m=>{ destroyKey(m.key); setBodyKey(m.key, m.orig); $(m.id+" tfoot").hide(); });',
'        (window.requestIdleCallback||function(cb){return setTimeout(cb,1200);})(prewarmCachesLite);',
'        setMobileUI("auto");',
'      });',
'',
'      function hideAllSections(){ Object.keys(POS_SECTION).forEach(p=>{ const s=POS_SECTION[p]; if(s) $(s).hide(); }); }',
'      function setLoading(on){ $(".section .loading-overlay").toggle(!!on); }',
'',
'      function applyFilters(){',
'        const pid=$("#player-select").val();',
'        const tm=($("#team-select").val()||"").trim();',
'        const posSel=$("#position-select").val();',
'        const aw=$(".week-btn.active").map(function(){return String($(this).data("week"));}).get();',
'        const awSet = aw.length ? new Set(aw) : null;',
'        setLoading(true);',
'        if (filterMode || pid || tm || posSel || (awSet && awSet.size) || (minSnaps && minSnaps>0)) window.__skipPrewarm = true;',
'        if(filterMode!=="team") restoreTeamOrder();',
'        hideAllSections();',
'',
'        if(filterMode==="player" && pid){',
'          let pos = (playerMap.get(pid)?.pos || "").toLowerCase();',
'          if(!pos || !POS_TABLES[pos]){ pos = POSITION_ORDER.find(p=>POS_TABLES[p] && POS_TABLES[p].some(k=>TABLES[k].byPid.has(pid))) || POSITION_ORDER[0]; }',
'          currentPlayerCat = pos;',
'          (POS_TABLES[pos]||[]).forEach(k=>{',
'            if (TABLES[k].teamOnly) {',
'              const $wrap = $(TABLES[k].id).closest(".table-responsive"); $wrap.hide(); $wrap.prev("h4").hide();',
'              return;',
'            }',
'            destroyKey(k);',
'            const arr = TABLES[k].byPid.get(pid) || [];',
'            let newHtml="";',
'            arr.forEach(function(tr){',
'              const $tds=$(tr).find("td");',
'              const w=$tds.eq(2).text().trim();',
'              if(awSet && !awSet.has(w)) return;',
'              const m=TABLES[k];',
'              const snapIdx=(m.snapTotalIdx!=null? m.snapTotalIdx : m.firstTotalIdx);',
'              const $clone=$(tr).clone();',
'              const $sn=$clone.children().eq(snapIdx).addClass("snaps-col");',
'              const sv=parseFloat($sn.attr("data-num")||"");',
'              if(Number.isFinite(sv)) $clone.attr("data-snaps", String(sv));',
'              newHtml += $clone.prop("outerHTML");',
'            });',
'            setBodyKey(k, newHtml); ensureNonEmptyKey(k); ensureInitKey(k, "player");',
'            TABLES[k].dt.column(0).visible(false); $(TABLES[k].id+" tfoot").show();',
'            const $wrap = $(TABLES[k].id).closest(".table-responsive"); $wrap.show(); $wrap.prev("h4").show();',
'            clearRowCapKey(k);',
'          });',
'          $(POS_SECTION[pos]).show();',
'',
'        } else if(filterMode==="team" && tm){',
'          currentPlayerCat = null;',
'          const wkey = aw.length ? aw.slice().sort((a,b)=>+a-+b).join(",") : "*";',
'          TEAM_DISPLAY_ORDER.filter(p=>POS_TABLES[p]).forEach(pos=>{',
'            (POS_TABLES[pos]||[]).forEach(k=>{',
'              if (TABLES[k] && TABLES[k].hideInTeam) {',
'                const $wrap = $(TABLES[k].id).closest(".table-responsive");',
'                $wrap.hide(); $wrap.prev("h4").hide();',
'                return;',
'              }',
'              const $wrap = $(TABLES[k].id).closest(".table-responsive");',
'              $wrap.show(); $wrap.prev("h4").show();',
'              destroyKey(k);',
'              const ck = `${k}|${tm}|${wkey}`;',
'              let html = cacheTeam.get(ck);',
'              if(html===undefined){ html = htmlForTeam(k, tm, awSet); cacheTeam.set(ck, html); }',
'              setBodyKey(k, html); ensureNonEmptyKey(k); ensureInitKey(k, "team");',
'              TABLES[k].dt.column(1).visible(false); TABLES[k].dt.column(2).visible(false);',
'              $(TABLES[k].id+" tfoot").hide();',
'              clearRowCapKey(k);',
'            });',
'            $(POS_SECTION[pos]).show();',
'          });',
'          const $sections=$("#sections"); TEAM_DISPLAY_ORDER.filter(p=>POS_SECTION[p]).forEach(p=>$(POS_SECTION[p]).appendTo($sections));',
'          reorderTeamLinear();',
'',
'        } else if(filterMode==="position" && posSel){',
'          const pos=(posSel||"").toLowerCase(); if(!POS_TABLES[pos]){ showPositionLimitControls(false); return; }',
'          currentPosCat=pos;',
'          (POS_TABLES[pos]||[]).forEach(k=>{',
'            if (TABLES[k].teamOnly) {',
'              const $wrap = $(TABLES[k].id).closest(".table-responsive"); $wrap.hide(); $wrap.prev("h4").hide();',
'              return;',
'            }',
'            destroyKey(k);',
'            const wkey = aw.length ? aw.slice().sort((a,b)=>+a-+b).join(",") : "*";',
'            const ck=`${k}|${wkey}`;',
'            let html = cachePos.get(ck);',
'            if(html===undefined){ html = htmlForPosition(k, awSet); cachePos.set(ck, html); }',
'            setBodyKey(k, html); ensureNonEmptyKey(k); ensureInitKey(k, "position");',
'            TABLES[k].dt.column(2).visible(false); $(TABLES[k].id+" tfoot").hide();',
'            const $wrap = $(TABLES[k].id).closest(".table-responsive"); $wrap.show(); $wrap.prev("h4").show();',
'            maybeApplyRowCap(TABLES[k]);',
'          });',
'          $(POS_SECTION[pos]).show(); showPositionLimitControls(true); applyPositionLimit(pos);',
'        } else {',
'          currentPlayerCat=null; showPositionLimitControls(false);',
'        }',
'        setLoading(false);',
'        applyMobileRoot();',
'        // Ensure Top 10 is enforced after the post-init draw/adjust',
'        if (filterMode==="position" && currentPosCat && posShowTop) {',
'          setTimeout(function(){ applyPositionLimit(currentPosCat); }, 0);',
'        }',
'        // Re-apply snap threshold if active (after tables were rebuilt)',
'        if (minSnaps && minSnaps > 0) {',
'          Object.values(TABLES).forEach(m => { if (m.dt) m.dt.draw(false); });',
'        }',
'      }',
'',
'      function fullReset(){',
'        hideAllSections(); $(".filter-btns .btn").removeClass("active");',
'        $("#qb-totals-row,#wr-totals-row,#te-totals-row,#rb-totals-row,#rb_pre_snap-totals-row,#wr_pre_snap-totals-row,#te_pre_snap-totals-row").parent().hide();',
'      }',
'',
'      displayMode="totals"; setRootMode(displayMode);',
'',
'      (function(){',
'        try{',
'          const raw = localStorage.getItem(LS_KEY);',
'          if(!raw) return;',
'          const o = JSON.parse(raw) || {};',
'',
'          if (o.display) {',
'            displayMode = (o.display==="pcts"?"pcts":(o.display==="both"?"both":"totals"));',
'            setRootMode(displayMode);',
'          }',
'          if (Array.isArray(o.weeksSel) && o.weeksSel.length) {',
'            $(".week-btn").each(function(){',
'              const w = String($(this).data("week"));',
'              $(this).toggleClass("active", o.weeksSel.includes(w));',
'            });',
'          }',
'          if (typeof o.posShowTop === "boolean") {',
'            posShowTop = o.posShowTop;',
'            $("#pos-top10").toggleClass("active",  posShowTop);',
'            $("#pos-all").toggleClass("active",   !posShowTop);',
'          }',
'',
'          // Restore minSnaps and draw once tables exist',
'          if (Number.isFinite(+o.minSnaps) && +o.minSnaps > 0) {',
'            minSnaps = +o.minSnaps;',
'            $("#min-snaps-input").val(String(minSnaps));',
'            setTimeout(function(){ Object.values(TABLES).forEach(m => { if (m.dt) m.dt.draw(false); }); }, 0);',
'          }',
'',
'          if (o.mode === "player" && o.player) {',
'            filterMode = "player";',
'            $("#pick-player").addClass("active");',
'            $("#player-dropdown").show();',
'            $("#player-select").val(o.player);',
'            showPositionLimitControls(false);',
'          } else if (o.mode === "team" && o.team) {',
'            filterMode = "team";',
'            $("#pick-team").addClass("active");',
'            $("#team-dropdown").show();',
'            $("#team-select").val(o.team);',
'            showPositionLimitControls(false);',
'          } else if (o.mode === "position" && o.position) {',
'            filterMode = "position";',
'            $("#pick-position").addClass("active");',
'            $("#position-dropdown").show();',
'            $("#position-select").val(o.position);',
'            showPositionLimitControls(true);',
'          }',
'',
'          if (o.mobileMode==="on" || o.mobileMode==="off" || o.mobileMode==="auto"){',
'            setMobileUI(o.mobileMode);',
'          } else {',
'            applyMobileRoot();',
'          }',
'        } catch(e){}',
'      })();',
'',
'      // ===== Min Snaps filter (global DataTables hook + UI handlers) =====',
'      // Robustly read the Snaps value from the row (prefer <td class="snaps-col">)',
'      function getSnapsFromRow(meta, settings, dataIndex){',
'        const rowObj = settings.aoData[dataIndex];',
'        const tr = rowObj && rowObj.nTr;',
'        if (!tr) return NaN;',
'        // Fast path: row-level cache',
'        const ds = tr.getAttribute("data-snaps");',
'        if (ds!=null && ds!=="") {',
'          const v = parseFloat(ds);',
'          if (Number.isFinite(v)) return v;',
'        }',
'        // Fallbacks (rare)',
'        let td = tr.querySelector("td.snaps-col");',
'        if (!td) {',
'          const idx = (meta.snapTotalIdx != null) ? meta.snapTotalIdx : ((meta.firstTotalIdx != null) ? meta.firstTotalIdx : 3);',
'          td = (tr.cells && tr.cells[idx]) ? tr.cells[idx] : null;',
'        }',
'        if (!td) return NaN;',
'        const numAttr = td.getAttribute("data-num");',
'        let val = (numAttr != null && numAttr !== "" && !isNaN(numAttr)) ? parseFloat(numAttr) : NaN;',
'        if (!Number.isFinite(val)) {',
'          const txt = (td.textContent || "").replace(/,/g, "").trim();',
'          const left = txt.split("/")[0];',
'          const m = left.match(/-?\\d+(?:\\.\\d+)?/);',
'          val = m ? parseFloat(m[0]) : NaN;',
'        }',
'        // backfill cache',
'        if (Number.isFinite(val)) tr.setAttribute("data-snaps", String(val));',
'        return val;',
'      }',
'',
'      const snapThresholdFilter = function (settings, data, dataIndex) {',
'        if (!minSnaps || minSnaps <= 0) return true;',
'        const tableId = settings.nTable ? (settings.nTable.id || "") : "";',
'        const key = tableId.replace(/_table$/, "");',
'        const meta = TABLES[key];',
'        if (!meta) return true;',
'        const snaps = getSnapsFromRow(meta, settings, dataIndex);',
'        if (!Number.isFinite(snaps)) return true;', # don\'t exclude if unreadable',
'        return snaps >= minSnaps;',
'      };',
'      $.fn.dataTable.ext.search.push(snapThresholdFilter);',
'',
'      function applyMinSnapsNow(){',
'        const raw = String($("#min-snaps-input").val() || "").trim();',
'        const parsed = parseInt(raw, 10);',
'        if (Number.isFinite(parsed) && parsed >= 0) {',
'          minSnaps = parsed;',
'        } else {',
'          minSnaps = 0;',
'          $("#min-snaps-input").val("");',
'        }',
'        persistState();',
'        // Redraw all tables so the global filter runs',
'        Object.values(TABLES).forEach(m => { if (m.dt) m.dt.draw(false); });',
'        // If we are in Position view, re-apply the Top-10/All limiter after the draw',
'        if (filterMode === "position" && currentPosCat) {',
'          setTimeout(function(){',
'            applyPositionLimit(currentPosCat);',
'            (POS_TABLES[currentPosCat] || []).forEach(k => maybeApplyRowCap(TABLES[k]));',
'          }, 0);',
'        }',
'      }',
'      $("#apply-snaps-btn").on("click", applyMinSnapsNow);',
'      $("#min-snaps-input").on("keydown", function(e){ if (e.key === "Enter") { e.preventDefault(); applyMinSnapsNow(); } });',
'      $("#clear-snaps-btn").on("click", function(){ $("#min-snaps-input").val(""); minSnaps = 0; persistState(); Object.values(TABLES).forEach(m => { if (m.dt) m.dt.draw(false); }); });',
'',
'      applyFilters();',
'      // Don’t compete with first filter interactions; defer cache warmup',
'      (function(){',
'        var prewarmed=false, timer=null;',
'        function run(){ if(prewarmed) return; prewarmed=true; try{ prewarmCachesLite(); }catch(e){} }',
'        function schedule(ms){ if(timer){ clearTimeout(timer); } timer=setTimeout(run, ms); }',
'        // Any interaction with filter UI postpones warmup by 4s',
'        var sel = "#snap-rates .filter-btns, #player-dropdown, #team-dropdown, #position-dropdown, #snap-rates .week-filter, #snap-rates .snap-filter, #snap-rates .toggle-btns, #snap-rates .mobile-toggle";',
'        document.querySelectorAll(sel).forEach(function(n){',
'          n.addEventListener("pointerdown", function(){ if(!prewarmed) schedule(4000); }, {passive:true});',
'          n.addEventListener("keydown", function(){ if(!prewarmed) schedule(4000); });',
'        });',
'        // First chance to warm up: a bit after full load/paint',
'        window.addEventListener("load", function(){ schedule(3500); });',
'      })();',
'',
'    });',
'  </script>',
'</div>',
'</body>',
'</html>'
)
#This is temporary while I'm testing
file_name <- paste(
"~/html_tests/utilization_report",
"2024",
"8",
"body",
".html",
sep = "_"
)
#file_name <- paste(
#  "~/html_tests/utilization_report",
#  season,
#  week,
#  "body",
#  ".html",
#  sep = "_"
#)
# Write HTML and CSV to disk
writeLines(combined_html, file_name)
gert::git_add(".") # stage everything
gert::git_commit("Update HTML") # commit staged files
gert::git_push(remote = "origin")
