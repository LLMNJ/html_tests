"input_molly_contract_dead_money"
)
add_to_database_table(input_molly_contracts_new, "input_molly_contracts")
add_to_database_table(
input_molly_team_salary_caps_new,
"input_molly_team_salary_caps"
)
add_to_database_table(
input_molly_unadjusted_salary_caps_new,
"input_molly_unadjusted_salary_caps"
)
add_to_database_table(
input_molly_official_seasons_new,
"input_molly_official_seasons"
)
add_to_database_table(
input_molly_ngp_transfer_portal_new,
"input_molly_ngp_transfer_portal"
)
#This is to create the a_current_positions table
sql_statement <- paste(
"
SELECT a.player_id, CASE WHEN a.player_id = 161701 THEN 'WR' ELSE a.season_position END as position
FROM (
SELECT ps.player_id, ps.season_position, ROW_NUMBER() OVER (
PARTITION BY ps.player_id
ORDER BY ps.player_season DESC, l.league_abbreviation DESC
) AS sort_order
FROM input_molly_player_seasons ps
INNER JOIN a_leagues l on l.league_id = ps.league_id
WHERE l.league_abbreviation in ('NFL','NCAA') and ps.player_id is not null) a
WHERE a.sort_order = 1
",
sep = ""
)
current_positions <- dbGetQuery(n, sql_statement)
replace_database_table(current_positions, 'a_current_positions')
#This is to create the a_current_starting_offensive_lines table
sql_statement <- paste(
"
SELECT dc.franchise_id, dc.player_id, dc.depth_chart_position
FROM input_molly_depth_charts dc
INNER JOIN a_franchises f on f.franchise_id = dc.franchise_id
WHERE dc.off_def = 'O' and dc.package = '11' and dc.depth = 1 and dc.depth_chart_position in ('LT','LG','C','RG','RT')",
sep = ""
)
current_starting_offensive_lines <- dbGetQuery(n, sql_statement)
replace_database_table(
current_starting_offensive_lines,
'a_current_starting_offensive_lines'
)
# This is to remove everything else at the end
rm(add_to_database_table, cities, franchises, games, leagues, players)
rm(
current_positions,
replace_database_table,
sql_statement,
current_starting_offensive_lines
)
rm(
input_molly_contract_active_seasons,
input_molly_contract_dead_money,
input_molly_contracts,
input_molly_depth_charts,
input_molly_franchise_personnel,
input_molly_game_officials,
input_molly_game_weather,
input_molly_ngp_transfer_portal,
input_molly_official_seasons,
input_molly_officials,
input_molly_personnel,
input_molly_player_combine_results,
input_molly_player_injuries,
input_molly_player_injuries_history,
input_molly_player_injury_details,
input_molly_player_jerseys,
input_molly_player_positions,
input_molly_player_pro_day,
input_molly_player_seasons,
input_molly_player_statuses,
input_molly_team_member_game_statuses,
input_molly_team_member_practice_statuses,
input_molly_team_members,
input_molly_team_salary_caps,
input_molly_unadjusted_salary_caps
)
# This is to remove the data frames with blank rows, as well as now unused tables
isEmpty <- function(x) {
is.data.frame(x) && nrow(x) == 0
}
empty <- unlist(eapply(.GlobalEnv, isEmpty))
## remove the empties
rm(list = names(empty)[empty])
#This is to remove all the dataframes that end in old
all_objects <- ls()
objects_to_remove <- all_objects[grepl("(_old$|_new$|_removed$)", all_objects)]
rm(list = objects_to_remove)
#This is to remove everything else
rm(
all_objects,
empty,
objects_to_remove,
changed,
isEmpty,
new,
old_col_names,
remove_from_database,
removed,
update_database,
remove_from_database_string,
changed_three,
changed_two,
new_three,
new_two,
old_col_names_three,
old_col_names_two,
removed_three,
removed_two
)
source("/home/nathan/Dropbox/901_functions/Custom footer.R")
source("/home/nathan/Dropbox/901_functions/Custom header.R")
setwd("~/html_tests")
library(glue)
# Constants for dynamic values
league_type <- "PPR"
number_of_players <- 150
week <- 1
table_title <- paste("Rest of Season Rankings Following Week ", week, sep = "")
csv_filename <- gsub("\\s+", "_", tolower(table_title))
last_updated_text <- format(
round(as.POSIXct(Sys.time(), tz = "America/New_York"), units = "mins"),
"%a %m/%d %I:%M %p"
)
url <-
"https://docs.google.com/spreadsheets/d/1KbwN3IDUxRzDx9vCMz2Xe4o3eQj7574wFCbW8VrdeFw/edit#gid=80961760"
players <- read_sheet(url, sheet = "players")
teams <- read_sheet(url, sheet = "teams")
players <- left_join(
x = players,
y = teams,
by = c("current_team" = "team_last_name...2")
)
players <- players %>%
mutate(
rank = case_when(
league_type == "PPR" ~ players$ppr_rank,
league_type == "half" ~ players$half_rank,
league_type == "standard" ~ players$standard_rank,
league_type == "superflex" ~ players$superflex_rank,
league_type == "dynasty" ~ players$dynasty_rank,
league_type == "dynasty superflex" ~ players$dynasty_superflex_rank,
league_type == "dynasty rookie" ~ players$dynasty_superflex_rank,
league_type == "dynasty rookie superflex" ~
players$dynasty_superflex_rookie_rank,
TRUE ~ players$ppr_rank
)
)
players$player_profile_url <- players$pff_player_url
players <- select(
players,
rank,
position,
name,
current_team,
player_profile_url,
url
)
players <- filter(players, players$rank <= number_of_players) %>%
arrange(rank)
# Build <tbody> rows from dataframe
rows <- apply(players, 1, function(r) {
glue(
'<tr>\n',
'  <td>{r["rank"]}</td>\n',
'  <td>{r["position"]}</td>\n',
'  <td><a href="{r["player_profile_url"]}">{r["name"]}</a></td>\n',
'  <td><a href="{r["url"]}">{r["current_team"]}</a></td>\n',
'</tr>'
)
})
tbody_html <- paste(rows, collapse = "\n")
# Construct full HTML inline
html_lines <- c(
'<!DOCTYPE html>',
'<html lang="en">',
'<html lang="en">',
'<head>',
'  <meta charset="UTF-8">',
'  <meta name="viewport" content="width=device-width, initial-scale=1">',
sprintf('  <title>%s</title>', table_title),
'  <link href="https://fonts.googleapis.com/css2?family=Archivo&display=swap" rel="stylesheet">',
'  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">',
'  <link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/dataTables.bootstrap5.min.css">',
'  <link rel="stylesheet" href="https://cdn.datatables.net/buttons/2.4.1/css/buttons.bootstrap5.min.css">',
'  <style>',
"    body, table { font-family: 'Archivo', sans-serif; }",
'    .table-responsive { overflow: visible; }',
'    #example th, #example td { text-align: center; }',
'    #example thead th {',
'      position: sticky;',
'      top: 0;',
'      background-color: #f8f9fa;',
'      z-index: 2;',
'    }',
'    #example .filter-row input, #example .filter-row select { width: 100%; box-sizing: border-box; text-align: center; }',
'    #example a { color: #0d6efd; text-decoration: none; }',
'    #example a:hover { text-decoration: underline; }',
'    .dataTables_filter { display: none; }',
'    .desktop-label { display: inline; }',
'    .mobile-label { display: none; }',
'    @media (max-width: 576px) {',
'      #example { table-layout: fixed; width: 100%; }',
'      #example th, #example td { font-size: 12px; padding: 2px; }',
'      #example th:nth-child(1), #example td:nth-child(1) {',
'        width: 8%; max-width: 30px; white-space: nowrap; text-align: left; padding-right: 12px;',
'      }',
'      #example th:nth-child(2), #example td:nth-child(2) {',
'        width: 10%; max-width: 35px; white-space: nowrap; text-align: left; padding-right: 12px;',
'      }',
'      #example th:nth-child(3), #example td:nth-child(3) {',
'        width: 35%; max-width: 100px; word-wrap: break-word; white-space: normal;',
'      }',
'      #example th:nth-child(4), #example td:nth-child(4) {',
'        width: 30%; max-width: 70px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;',
'      }',
'      .desktop-label { display: none; }',
'      .mobile-label { display: inline; }',
'    }',
'  </style>',
'</head>',
'<body class="p-4">',
sprintf(
'  <div id="last-updated-block" class="mb-2"><strong>Last Updated:</strong> %s ET</div>',
last_updated_text
),
'  <div class="table-responsive">',
'    <table id="example" class="table table-striped table-hover">',
'      <thead class="table-light">',
'        <tr>',
'          <th><span class="desktop-label">Rank</span><span class="mobile-label">Rk.</span></th>',
'          <th><span class="desktop-label">Position</span><span class="mobile-label">Pos.</span></th>',
'          <th>Name</th>',
'          <th>Team</th>',
'        </tr>',
'      </thead>',
'      <tbody>',
'        <tr class="filter-row">',
'          <td></td>',
'          <td></td>',
'          <td><input type="text" class="form-control form-control-sm text-center" placeholder="Filter"></td>',
'          <td></td>',
'        </tr>',
tbody_html,
'      </tbody>',
'    </table>',
'  </div>',
'  <script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>',
'  <script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>',
'  <script src="https://cdn.datatables.net/1.13.6/js/dataTables.bootstrap5.min.js"></script>',
'  <script src="https://cdn.datatables.net/buttons/2.4.1/js/dataTables.buttons.min.js"></script>',
'  <script src="https://cdn.datatables.net/buttons/2.4.1/js/buttons.bootstrap5.min.js"></script>',
'  <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>',
'  <script src="https://cdn.datatables.net/buttons/2.4.1/js/buttons.html5.min.js"></script>',
'  <script>',
'    $(document).ready(function() {',
'      var table = $("#example").DataTable({',
'        dom: "B t",',
'        autoWidth: false,',
'        columnDefs: [',
'          { targets: 0, width: "8%" },',
'          { targets: 1, width: "10%" },',
'          { targets: 2, width: "35%" },',
'          { targets: 3, width: "30%" }',
'        ],',
sprintf(
'        buttons: [{ extend: "csvHtml5", text: "Export to CSV", filename: "%s" }],',
csv_filename
),
'        paging: false, ordering: true, info: false, orderCellsTop: true',
'      });',
'      // name filter input (column 2)',
'      $(".filter-row input").on("keyup change", function() {',
'        table.column(2).search(this.value).draw();',
'      });',
'      // dropdowns for position and team',
'      function addDropdown(colIndex, placeholder) {',
'        var col = table.column(colIndex);',
'        var vals = col.data().map(function(d) { return $("<div>").html(d).text(); }).toArray();',
'        vals = Array.from(new Set(vals)).sort();',
'        var sel = $("<select class=\\"form-select form-select-sm text-center\\"></select>");',
'        sel.append($("<option>").val("").text(placeholder));',
'        $.each(vals, function(_, v) { sel.append($("<option>").val(v).text(v)); });',
'        sel.on("change", function() {',
'          col.search(this.value ? "^" + this.value + "$" : "", true, false).draw();',
'        });',
'        $("#example .filter-row td").eq(colIndex).append(sel);',
'      }',
'      addDropdown(1, "Filter");',
'      addDropdown(3, "Filter");',
'    });',
'  </script>',
'</body>',
'</html>'
)
file_name <- paste(
"/home/nathan/Dropbox/403_article_creation/html/cheat_sheet",
league_type,
"body",
".html",
sep = "_"
)
# Write HTML and CSV to disk
writeLines(html_lines, file_name)
gert::git_add(".") # stage everything
gert::git_commit("Update HTML") # commit staged files
source("/home/nathan/Dropbox/901_functions/Custom header.R")
setwd("~/html_tests")
library(glue)
# Constants for dynamic values
league_type <- "PPR"
number_of_players <- 150
season <- 2025
week <- 1
table_title <- paste("Rest of Season Rankings Following Week ", week, sep = "")
csv_filename <- gsub("\\s+", "_", tolower(table_title))
last_updated_text <- format(
round(as.POSIXct(Sys.time(), tz = "America/New_York"), units = "mins"),
"%a %m/%d %I:%M %p"
)
url <-
"https://docs.google.com/spreadsheets/d/1KbwN3IDUxRzDx9vCMz2Xe4o3eQj7574wFCbW8VrdeFw/edit#gid=80961760"
players <- read_sheet(url, sheet = "players")
teams <- read_sheet(url, sheet = "teams")
players <- left_join(
x = players,
y = teams,
by = c("current_team" = "team_last_name...2")
)
players <- players %>%
mutate(
rank = case_when(
league_type == "PPR" ~ players$ppr_rank,
league_type == "half" ~ players$half_rank,
league_type == "standard" ~ players$standard_rank,
league_type == "superflex" ~ players$superflex_rank,
league_type == "dynasty" ~ players$dynasty_rank,
league_type == "dynasty superflex" ~ players$dynasty_superflex_rank,
league_type == "dynasty rookie" ~ players$dynasty_superflex_rank,
league_type == "dynasty rookie superflex" ~
players$dynasty_superflex_rookie_rank,
TRUE ~ players$ppr_rank
)
)
players$player_profile_url <- players$pff_player_url
players <- select(
players,
rank,
position,
name,
current_team,
player_profile_url,
url
)
players <- filter(players, players$rank <= number_of_players) %>%
arrange(rank)
# Build <tbody> rows from dataframe
rows <- apply(players, 1, function(r) {
glue(
'<tr>\n',
'  <td>{r["rank"]}</td>\n',
'  <td>{r["position"]}</td>\n',
'  <td><a href="{r["player_profile_url"]}">{r["name"]}</a></td>\n',
'  <td><a href="{r["url"]}">{r["current_team"]}</a></td>\n',
'</tr>'
)
})
tbody_html <- paste(rows, collapse = "\n")
# Construct full HTML inline
html_lines <- c(
'<!DOCTYPE html>',
'<html lang="en">',
'<html lang="en">',
'<head>',
'  <meta charset="UTF-8">',
'  <meta name="viewport" content="width=device-width, initial-scale=1">',
sprintf('  <title>%s</title>', table_title),
'  <link href="https://fonts.googleapis.com/css2?family=Archivo&display=swap" rel="stylesheet">',
'  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">',
'  <link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/dataTables.bootstrap5.min.css">',
'  <link rel="stylesheet" href="https://cdn.datatables.net/buttons/2.4.1/css/buttons.bootstrap5.min.css">',
'  <style>',
"    body, table { font-family: 'Archivo', sans-serif; }",
'    .table-responsive { overflow: visible; }',
'    #example th, #example td { text-align: center; }',
'    #example thead th {',
'      position: sticky;',
'      top: 0;',
'      background-color: #f8f9fa;',
'      z-index: 2;',
'    }',
'    #example .filter-row input, #example .filter-row select { width: 100%; box-sizing: border-box; text-align: center; }',
'    #example a { color: #0d6efd; text-decoration: none; }',
'    #example a:hover { text-decoration: underline; }',
'    .dataTables_filter { display: none; }',
'    .desktop-label { display: inline; }',
'    .mobile-label { display: none; }',
'    @media (max-width: 576px) {',
'      #example { table-layout: fixed; width: 100%; }',
'      #example th, #example td { font-size: 12px; padding: 2px; }',
'      #example th:nth-child(1), #example td:nth-child(1) {',
'        width: 8%; max-width: 30px; white-space: nowrap; text-align: left; padding-right: 12px;',
'      }',
'      #example th:nth-child(2), #example td:nth-child(2) {',
'        width: 10%; max-width: 35px; white-space: nowrap; text-align: left; padding-right: 12px;',
'      }',
'      #example th:nth-child(3), #example td:nth-child(3) {',
'        width: 35%; max-width: 100px; word-wrap: break-word; white-space: normal;',
'      }',
'      #example th:nth-child(4), #example td:nth-child(4) {',
'        width: 30%; max-width: 70px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;',
'      }',
'      .desktop-label { display: none; }',
'      .mobile-label { display: inline; }',
'    }',
'  </style>',
'</head>',
'<body class="p-4">',
sprintf(
'  <div id="last-updated-block" class="mb-2"><strong>Last Updated:</strong> %s ET</div>',
last_updated_text
),
'  <div class="table-responsive">',
'    <table id="example" class="table table-striped table-hover">',
'      <thead class="table-light">',
'        <tr>',
'          <th><span class="desktop-label">Rank</span><span class="mobile-label">Rk.</span></th>',
'          <th><span class="desktop-label">Position</span><span class="mobile-label">Pos.</span></th>',
'          <th>Name</th>',
'          <th>Team</th>',
'        </tr>',
'      </thead>',
'      <tbody>',
'        <tr class="filter-row">',
'          <td></td>',
'          <td></td>',
'          <td><input type="text" class="form-control form-control-sm text-center" placeholder="Filter"></td>',
'          <td></td>',
'        </tr>',
tbody_html,
'      </tbody>',
'    </table>',
'  </div>',
'  <script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>',
'  <script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>',
'  <script src="https://cdn.datatables.net/1.13.6/js/dataTables.bootstrap5.min.js"></script>',
'  <script src="https://cdn.datatables.net/buttons/2.4.1/js/dataTables.buttons.min.js"></script>',
'  <script src="https://cdn.datatables.net/buttons/2.4.1/js/buttons.bootstrap5.min.js"></script>',
'  <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>',
'  <script src="https://cdn.datatables.net/buttons/2.4.1/js/buttons.html5.min.js"></script>',
'  <script>',
'    $(document).ready(function() {',
'      var table = $("#example").DataTable({',
'        dom: "B t",',
'        autoWidth: false,',
'        columnDefs: [',
'          { targets: 0, width: "8%" },',
'          { targets: 1, width: "10%" },',
'          { targets: 2, width: "35%" },',
'          { targets: 3, width: "30%" }',
'        ],',
sprintf(
'        buttons: [{ extend: "csvHtml5", text: "Export to CSV", filename: "%s" }],',
csv_filename
),
'        paging: false, ordering: true, info: false, orderCellsTop: true',
'      });',
'      // name filter input (column 2)',
'      $(".filter-row input").on("keyup change", function() {',
'        table.column(2).search(this.value).draw();',
'      });',
'      // dropdowns for position and team',
'      function addDropdown(colIndex, placeholder) {',
'        var col = table.column(colIndex);',
'        var vals = col.data().map(function(d) { return $("<div>").html(d).text(); }).toArray();',
'        vals = Array.from(new Set(vals)).sort();',
'        var sel = $("<select class=\\"form-select form-select-sm text-center\\"></select>");',
'        sel.append($("<option>").val("").text(placeholder));',
'        $.each(vals, function(_, v) { sel.append($("<option>").val(v).text(v)); });',
'        sel.on("change", function() {',
'          col.search(this.value ? "^" + this.value + "$" : "", true, false).draw();',
'        });',
'        $("#example .filter-row td").eq(colIndex).append(sel);',
'      }',
'      addDropdown(1, "Filter");',
'      addDropdown(3, "Filter");',
'    });',
'  </script>',
'</body>',
'</html>'
)
file_name <- paste(
"~/html_tests/rest_of_season_rankings",
season,
week,
".html",
sep = "_"
)
# Write HTML and CSV to disk
writeLines(html_lines, file_name)
gert::git_add(".") # stage everything
gert::git_commit("Update HTML") # commit staged files
gert::git_push(remote = "origin")
