sum(CASE WHEN b.garbage_time THEN b.snap ELSE 0 END) as total_garbage_time_snaps
FROM
(
SELECT DISTINCT ors.play_id, g.week_id, ors.franchise_id, 1 as snap, p.garbage_time, p.down, p.two_minute_drill, p.field_position, p.distance
FROM offense_regular_snaps ors
INNER JOIN dm_games g on g.id = ors.game_id
INNER JOIN dm_plays p on p.id = ors.play_id
INNER JOIN dm_player_seasons ps on ps.league_id = g.league_id and ps.player_id = ors.player_id and ps.season_id = g.season_id
WHERE ",
league_string,
" and g.season_id = ",
season,
" and g.week_id >= 0 and g.week_id <= ",
week,
" and p.regular_type in ('P','R') and p.fake is FALSE
)
b
GROUP BY b.week_id, b.franchise_id
)
d on z.week_id = d.week_id and z.franchise_id = d.franchise_id
",
sep = ""
)
rb_snap_rates <- dbGetQuery(galaxy, sql_statement)
rb_snap_rates[] <- lapply(rb_snap_rates, as.integer)
rb_snap_rates <- rb_snap_rates %>%
mutate(across(where(is.integer), ~ replace_na(.x, 0L)))
sql_statement <- paste(
"
SELECT z.player_id, z.franchise_id, z.week_id,
c.snaps, d.total_snaps, c.wr_set_1_snaps, d.total_wr_set_1_snaps, c.wr_set_2_snaps, d.total_wr_set_2_snaps, c.wr_set_3_snaps, d.total_wr_set_3_snaps,
c.wr_set_4_snaps, d.total_wr_set_4_snaps, c.wr_set_5_snaps, d.total_wr_set_5_snaps,
c.before_garbage_time_snaps, d.total_before_garbage_time_snaps, c.garbage_time_snaps, d.total_garbage_time_snaps
FROM
(
SELECT r.player_id, g.week_id, r.franchise_id
FROM dm_rosters r
INNER JOIN dm_games g on g.id = r.game_id
INNER JOIN dm_player_seasons ps on ps.league_id = g.league_id and ps.player_id = r.player_id and ps.season_id = g.season_id
WHERE ((g.league_id = 1 and r.offense_status in ('S','P','X')) or (g.league_id = 2 and r.offense_status in ('S','P'))) and ps.position = 'WR' and g.season_id = ",
season,
" and g.week_id >= 0 and g.week_id <= ",
week,
"
) z
LEFT JOIN
(
SELECT b.week_id, b.franchise_id, b.player_id,
sum(b.snap) as snaps,
sum(CASE WHEN b.wide_receiver_count = 1 THEN b.snap ELSE 0 END) as wr_set_1_snaps,
sum(CASE WHEN b.wide_receiver_count = 2 THEN b.snap ELSE 0 END) as wr_set_2_snaps,
sum(CASE WHEN b.wide_receiver_count = 3 THEN b.snap ELSE 0 END) as wr_set_3_snaps,
sum(CASE WHEN b.wide_receiver_count = 4 THEN b.snap ELSE 0 END) as wr_set_4_snaps,
sum(CASE WHEN b.wide_receiver_count = 5 THEN b.snap ELSE 0 END) as wr_set_5_snaps,
sum(CASE WHEN b.garbage_time IS FALSE THEN b.snap ELSE 0 END) as before_garbage_time_snaps,
sum(CASE WHEN b.garbage_time THEN b.snap ELSE 0 END) as garbage_time_snaps
FROM
(
SELECT ors.play_id, g.week_id, ors.franchise_id, ors.player_id, 1 as snap, a.wide_receiver_count, p.garbage_time
FROM offense_regular_snaps ors
INNER JOIN dm_games g on g.id = ors.game_id
INNER JOIN dm_plays p on p.id = ors.play_id
INNER JOIN dm_player_seasons ps on ps.league_id = g.league_id and ps.player_id = ors.player_id and ps.season_id = g.season_id
INNER JOIN
(
SELECT ors.play_id, g.week_id, ors.franchise_id, count(*) as wide_receiver_count
FROM offense_regular_snaps ors
INNER JOIN dm_games g on g.id = ors.game_id
INNER JOIN dm_plays p on p.id = ors.play_id
INNER JOIN dm_player_seasons ps on ps.league_id = g.league_id and ps.player_id = ors.player_id and ps.season_id = g.season_id
WHERE ",
league_string,
" and ps.position = 'WR' and g.season_id = ",
season,
" and g.week_id >= 0 and g.week_id <= ",
week,
" and p.regular_type in ('P','R') and p.fake is FALSE
GROUP BY ors.play_id, g.week_id, ors.franchise_id
)
a on a.play_id = ors.play_id
WHERE ",
league_string,
" and ps.position = 'WR' and g.season_id = ",
season,
" and g.week_id >= 0 and g.week_id <= ",
week,
" and p.regular_type in ('P','R') and p.fake is FALSE
)
b
GROUP BY b.week_id, b.franchise_id, b.player_id
)
c on z.player_id = c.player_id and z.franchise_id = c.franchise_id and z.week_id = c.week_id
INNER JOIN
(
SELECT b.week_id, b.franchise_id,
sum(b.snap) as total_snaps,
sum(CASE WHEN b.wide_receiver_count = 1 THEN b.snap ELSE 0 END) as total_wr_set_1_snaps,
sum(CASE WHEN b.wide_receiver_count = 2 THEN b.snap ELSE 0 END) as total_wr_set_2_snaps,
sum(CASE WHEN b.wide_receiver_count = 3 THEN b.snap ELSE 0 END) as total_wr_set_3_snaps,
sum(CASE WHEN b.wide_receiver_count = 4 THEN b.snap ELSE 0 END) as total_wr_set_4_snaps,
sum(CASE WHEN b.wide_receiver_count = 5 THEN b.snap ELSE 0 END) as total_wr_set_5_snaps,
sum(CASE WHEN b.garbage_time IS FALSE THEN b.snap ELSE 0 END) as total_before_garbage_time_snaps,
sum(CASE WHEN b.garbage_time THEN b.snap ELSE 0 END) as total_garbage_time_snaps
FROM
(
SELECT DISTINCT ors.play_id, g.week_id, ors.franchise_id, 1 as snap, a.wide_receiver_count, p.garbage_time
FROM offense_regular_snaps ors
INNER JOIN dm_games g on g.id = ors.game_id
INNER JOIN dm_plays p on p.id = ors.play_id
INNER JOIN dm_player_seasons ps on ps.league_id = g.league_id and ps.player_id = ors.player_id and ps.season_id = g.season_id
LEFT JOIN
(
SELECT ors.play_id, g.week_id, ors.franchise_id, count(*) as wide_receiver_count
FROM offense_regular_snaps ors
INNER JOIN dm_games g on g.id = ors.game_id
INNER JOIN dm_plays p on p.id = ors.play_id
INNER JOIN dm_player_seasons ps on ps.league_id = g.league_id and ps.player_id = ors.player_id and ps.season_id = g.season_id
WHERE ",
league_string,
" and ps.position = 'WR' and g.season_id = ",
season,
" and g.week_id >= 0 and g.week_id <= ",
week,
" and p.regular_type in ('P','R') and p.fake is FALSE
GROUP BY ors.play_id, g.week_id, ors.franchise_id
)
a on a.play_id = ors.play_id
WHERE ",
league_string,
" and g.season_id = ",
season,
" and g.week_id >= 0 and g.week_id <= ",
week,
" and p.regular_type in ('P','R') and p.fake is FALSE
)
b
GROUP BY b.week_id, b.franchise_id
)
d on z.week_id = d.week_id and z.franchise_id = d.franchise_id
",
sep = ""
)
wr_snap_rates <- dbGetQuery(galaxy, sql_statement)
wr_snap_rates[] <- lapply(wr_snap_rates, as.integer)
wr_snap_rates <- wr_snap_rates %>%
mutate(across(where(is.integer), ~ replace_na(.x, 0L)))
sql_statement <- paste(
"
SELECT z.player_id, z.franchise_id, z.week_id,
c.snaps, d.total_snaps, c.te_set_1_early_snaps, d.total_te_set_1_early_snaps, c.te_set_1_late_snaps, d.total_te_set_1_late_snaps, c.te_set_2_snaps, d.total_te_set_2_snaps, c.te_set_3_snaps, d.total_te_set_3_snaps,
c.te_set_4_snaps, d.total_te_set_4_snaps,
c.before_garbage_time_snaps, d.total_before_garbage_time_snaps, c.garbage_time_snaps, d.total_garbage_time_snaps
FROM
(
SELECT r.player_id, g.week_id, r.franchise_id
FROM dm_rosters r
INNER JOIN dm_games g on g.id = r.game_id
INNER JOIN dm_player_seasons ps on ps.league_id = g.league_id and ps.player_id = r.player_id and ps.season_id = g.season_id
WHERE ((g.league_id = 1 and r.offense_status in ('S','P','X')) or (g.league_id = 2 and r.offense_status in ('S','P'))) and ps.position = 'TE' and g.season_id = ",
season,
" and g.week_id >= 0 and g.week_id <= ",
week,
"
) z
LEFT JOIN
(
SELECT b.week_id, b.franchise_id, b.player_id,
sum(b.snap) as snaps,
sum(CASE WHEN b.tight_end_count = 1 and b.down <= 2 THEN b.snap ELSE 0 END) as te_set_1_early_snaps,
sum(CASE WHEN b.tight_end_count = 1 and b.down >= 3 THEN b.snap ELSE 0 END) as te_set_1_late_snaps,
sum(CASE WHEN b.tight_end_count = 2 THEN b.snap ELSE 0 END) as te_set_2_snaps,
sum(CASE WHEN b.tight_end_count = 3 THEN b.snap ELSE 0 END) as te_set_3_snaps,
sum(CASE WHEN b.tight_end_count = 4 THEN b.snap ELSE 0 END) as te_set_4_snaps,
sum(CASE WHEN b.garbage_time IS FALSE THEN b.snap ELSE 0 END) as before_garbage_time_snaps,
sum(CASE WHEN b.garbage_time THEN b.snap ELSE 0 END) as garbage_time_snaps
FROM
(
SELECT ors.play_id, g.week_id, ors.franchise_id, ors.player_id, 1 as snap, a.tight_end_count, p.garbage_time, p.down
FROM offense_regular_snaps ors
INNER JOIN dm_games g on g.id = ors.game_id
INNER JOIN dm_plays p on p.id = ors.play_id
INNER JOIN dm_player_seasons ps on ps.league_id = g.league_id and ps.player_id = ors.player_id and ps.season_id = g.season_id
INNER JOIN
(
SELECT ors.play_id, g.week_id, ors.franchise_id, count(*) as tight_end_count
FROM offense_regular_snaps ors
INNER JOIN dm_games g on g.id = ors.game_id
INNER JOIN dm_plays p on p.id = ors.play_id
INNER JOIN dm_player_seasons ps on ps.league_id = g.league_id and ps.player_id = ors.player_id and ps.season_id = g.season_id
WHERE ",
league_string,
" and ps.position = 'TE' and g.season_id = ",
season,
" and g.week_id >= 0 and g.week_id <= ",
week,
" and p.regular_type in ('P','R') and p.fake is FALSE
GROUP BY ors.play_id, g.week_id, ors.franchise_id
)
a on a.play_id = ors.play_id
WHERE ",
league_string,
" and ps.position = 'TE' and g.season_id = ",
season,
" and g.week_id >= 0 and g.week_id <= ",
week,
" and p.regular_type in ('P','R') and p.fake is FALSE
)
b
GROUP BY b.week_id, b.franchise_id, b.player_id
)
c on z.player_id = c.player_id and z.franchise_id = c.franchise_id and z.week_id = c.week_id
INNER JOIN
(
SELECT b.week_id, b.franchise_id,
sum(b.snap) as total_snaps,
sum(CASE WHEN b.tight_end_count = 1 and b.down <= 2 THEN b.snap ELSE 0 END) as total_te_set_1_early_snaps,
sum(CASE WHEN b.tight_end_count = 1 and b.down >= 3 THEN b.snap ELSE 0 END) as total_te_set_1_late_snaps,
sum(CASE WHEN b.tight_end_count = 2 THEN b.snap ELSE 0 END) as total_te_set_2_snaps,
sum(CASE WHEN b.tight_end_count = 3 THEN b.snap ELSE 0 END) as total_te_set_3_snaps,
sum(CASE WHEN b.tight_end_count = 4 THEN b.snap ELSE 0 END) as total_te_set_4_snaps,
sum(CASE WHEN b.garbage_time IS FALSE THEN b.snap ELSE 0 END) as total_before_garbage_time_snaps,
sum(CASE WHEN b.garbage_time THEN b.snap ELSE 0 END) as total_garbage_time_snaps
FROM
(
SELECT DISTINCT ors.play_id, g.week_id, ors.franchise_id, 1 as snap, a.tight_end_count, p.garbage_time, p.down
FROM offense_regular_snaps ors
INNER JOIN dm_games g on g.id = ors.game_id
INNER JOIN dm_plays p on p.id = ors.play_id
INNER JOIN dm_player_seasons ps on ps.league_id = g.league_id and ps.player_id = ors.player_id and ps.season_id = g.season_id
LEFT JOIN
(
SELECT ors.play_id, g.week_id, ors.franchise_id, count(*) as tight_end_count
FROM offense_regular_snaps ors
INNER JOIN dm_games g on g.id = ors.game_id
INNER JOIN dm_plays p on p.id = ors.play_id
INNER JOIN dm_player_seasons ps on ps.league_id = g.league_id and ps.player_id = ors.player_id and ps.season_id = g.season_id
WHERE ",
league_string,
" and ps.position = 'TE' and g.season_id = ",
season,
" and g.week_id >= 0 and g.week_id <= ",
week,
" and p.regular_type in ('P','R') and p.fake is FALSE
GROUP BY ors.play_id, g.week_id, ors.franchise_id
)
a on a.play_id = ors.play_id
WHERE ",
league_string,
" and g.season_id = ",
season,
" and g.week_id >= 0 and g.week_id <= ",
week,
"  and p.regular_type in ('P','R') and p.fake is FALSE
)
b
GROUP BY b.week_id, b.franchise_id
)
d on z.week_id = d.week_id and z.franchise_id = d.franchise_id
",
sep = ""
)
te_snap_rates <- dbGetQuery(galaxy, sql_statement)
te_snap_rates[] <- lapply(te_snap_rates, as.integer)
te_snap_rates <- te_snap_rates %>%
mutate(across(where(is.integer), ~ replace_na(.x, 0L)))
sql_statement <- paste(
"
SELECT a.week_id, a.franchise_id, a.player_id, sum(a.snap) as snaps, sum(a.lined_up_backfield) as lined_up_backfield, sum(a.lined_up_receiver) as lined_up_receiver, sum(a.motion) as motion
FROM (
SELECT ors.play_id, g.week_id, ors.franchise_id, ors.player_id, 1 as snap,
CASE WHEN pos.group in ('QB','RB') THEN 1 ELSE 0 END as lined_up_backfield,
CASE WHEN pos.group = 'WR' THEN 1 ELSE 0 END as lined_up_receiver,
CASE WHEN pm.motion = 1 THEN 1 ELSE 0 END as motion
FROM offense_regular_snaps ors
INNER JOIN dm_games g on g.id = ors.game_id
INNER JOIN dm_plays p on p.id = ors.play_id
INNER JOIN dm_player_seasons ps on ps.league_id = g.league_id and ps.player_id = ors.player_id and ps.season_id = g.season_id
INNER JOIN dm_player_participations pp on pp.player_id = ors.player_id and pp.play_id = ors.play_id
INNER JOIN positions pos on pos.position = pp.position
LEFT JOIN player_motions pm on pm.play_id = ors.play_id and pm.player_id = ors.player_id
WHERE ",
league_string,
" and ps.position = 'HB' and g.season_id = ",
season,
" and g.week_id >= 0 and g.week_id <= ",
week,
" and p.regular_type in ('P','R') and p.fake is FALSE
) a
GROUP BY a.week_id, a.franchise_id, a.player_id
",
sep = ""
)
rb_pre_snap <- dbGetQuery(galaxy, sql_statement)
rb_pre_snap[] <- lapply(rb_pre_snap, as.integer)
rb_pre_snap <- rb_pre_snap %>%
mutate(across(where(is.integer), ~ replace_na(.x, 0L)))
sql_statement <- paste(
"
SELECT a.week_id, a.franchise_id, a.player_id, sum(a.snap) as snaps, sum(a.lined_up_wide) as lined_up_wide, sum(a.lined_up_slot) as lined_up_slot,
sum(a.lined_up_wide_on_ball) as lined_up_wide_on_ball, sum(a.lined_up_wide_off_ball) as lined_up_wide_off_ball, sum(a.lined_up_wide_left) as lined_up_wide_left, sum(a.lined_up_wide_right) as lined_up_wide_right,
sum(a.motion) as motion
FROM (
SELECT ors.play_id, g.week_id, ors.franchise_id, ors.player_id, 1 as snap,
CASE WHEN pos.group = 'WR' and pos.slotted is false THEN 1 ELSE 0 END as lined_up_wide,
CASE WHEN pos.group = 'WR' and pos.slotted is true THEN 1 ELSE 0 END as lined_up_slot,
CASE WHEN pos.group = 'WR' and pos.slotted is false and pp.line_of_scrimmage is true THEN 1 ELSE 0 END as lined_up_wide_on_ball,
CASE WHEN pos.group = 'WR' and pos.slotted is false and pp.line_of_scrimmage is false THEN 1 ELSE 0 END as lined_up_wide_off_ball,
CASE WHEN pp.position = 'LWR' THEN 1 ELSE 0 END as lined_up_wide_left,
CASE WHEN pp.position = 'RWR' THEN 1 ELSE 0 END as lined_up_wide_right,
CASE WHEN pm.motion = 1 THEN 1 ELSE 0 END as motion
FROM offense_regular_snaps ors
INNER JOIN dm_games g on g.id = ors.game_id
INNER JOIN dm_plays p on p.id = ors.play_id
INNER JOIN dm_player_seasons ps on ps.league_id = g.league_id and ps.player_id = ors.player_id and ps.season_id = g.season_id
INNER JOIN dm_player_participations pp on pp.player_id = ors.player_id and pp.play_id = ors.play_id
INNER JOIN positions pos on pos.position = pp.position
LEFT JOIN player_motions pm on pm.play_id = ors.play_id and pm.player_id = ors.player_id
WHERE ",
league_string,
" and ps.position = 'WR' and g.season_id = ",
season,
" and g.week_id >= 0 and g.week_id <= ",
week,
" and p.regular_type in ('P','R') and p.fake is FALSE
) a
GROUP BY a.week_id, a.franchise_id, a.player_id
",
sep = ""
)
wr_pre_snap <- dbGetQuery(galaxy, sql_statement)
wr_pre_snap[] <- lapply(wr_pre_snap, as.integer)
wr_pre_snap <- wr_pre_snap %>%
mutate(across(where(is.integer), ~ replace_na(.x, 0L)))
sql_statement <- paste(
"
SELECT a.week_id, a.franchise_id, a.player_id, sum(a.snap) as snaps, sum(a.lined_up_wide) as lined_up_wide, sum(a.lined_up_slot) as lined_up_slot, sum(a.lined_up_tight) as lined_up_tight, sum(a.lined_up_backfield) as lined_up_backfield,
sum(a.lined_up_on_ball) as lined_up_on_ball, sum(a.lined_up_off_ball) as lined_up_off_ball,
sum(a.motion) as motion
FROM (
SELECT ors.play_id, g.week_id, ors.franchise_id, ors.player_id, 1 as snap,
CASE WHEN pos.group = 'WR' and pos.slotted is false THEN 1 ELSE 0 END as lined_up_wide,
CASE WHEN pos.group = 'WR' and pos.slotted is true THEN 1 ELSE 0 END as lined_up_slot,
CASE WHEN pos.group = 'TE' THEN 1 ELSE 0 END as lined_up_tight,
CASE WHEN pos.group = 'RB' THEN 1 ELSE 0 END as lined_up_backfield,
CASE WHEN pp.line_of_scrimmage is true THEN 1 ELSE 0 END as lined_up_on_ball,
CASE WHEN pp.line_of_scrimmage is false THEN 1 ELSE 0 END as lined_up_off_ball,
CASE WHEN pm.motion = 1 THEN 1 ELSE 0 END as motion
FROM offense_regular_snaps ors
INNER JOIN dm_games g on g.id = ors.game_id
INNER JOIN dm_plays p on p.id = ors.play_id
INNER JOIN dm_player_seasons ps on ps.league_id = g.league_id and ps.player_id = ors.player_id and ps.season_id = g.season_id
INNER JOIN dm_player_participations pp on pp.player_id = ors.player_id and pp.play_id = ors.play_id
INNER JOIN positions pos on pos.position = pp.position
LEFT JOIN player_motions pm on pm.play_id = ors.play_id and pm.player_id = ors.player_id
WHERE ",
league_string,
" and ps.position = 'TE' and g.season_id = ",
season,
" and g.week_id >= 0 and g.week_id <= ",
week,
" and p.regular_type in ('P','R') and p.fake is FALSE
) a
GROUP BY a.week_id, a.franchise_id, a.player_id
",
sep = ""
)
te_pre_snap <- dbGetQuery(galaxy, sql_statement)
te_pre_snap[] <- lapply(te_pre_snap, as.integer)
te_pre_snap <- te_pre_snap %>%
mutate(across(where(is.integer), ~ replace_na(.x, 0L)))
sql_statement <- paste(
"
SELECT b.*, c.team_routes
FROM (
SELECT a.week_id, a.franchise_id, a.player_id, a.position, sum(a.snap) as snaps, sum(a.run) as run, sum(a.run_play) as run_play, sum(a.dropback) as dropback, sum(a.pass_play) as pass_play,
sum(a.scramble) as scramble, sum(a.sack) as sack, sum(a.true_route) as true_route, sum(a.target) as targets
FROM (
SELECT ors.play_id, g.week_id, ors.franchise_id, ors.player_id, ps.position, 1 as snap, ors.run as run, ors.run + ors.run_block as run_play, ors.passer as dropback, ors.passer + ors.route_run + ors.pass_block as pass_play, psc.scramble, psa.sack,
CASE WHEN ors.route_run = 1 and (pr.no_route is false or pr.no_route is null) and (pr.run_play is false or pr.run_play is null) and (pr.screen_block is false or pr.screen_block is null)  THEN 1 ELSE 0 END true_route,
rt.target
FROM offense_regular_snaps ors
INNER JOIN dm_games g on g.id = ors.game_id
INNER JOIN dm_plays p on p.id = ors.play_id
INNER JOIN dm_player_seasons ps on ps.league_id = g.league_id and ps.player_id = ors.player_id and ps.season_id = g.season_id
INNER JOIN dm_player_participations pp on pp.player_id = ors.player_id and pp.play_id = ors.play_id
LEFT JOIN passing_scrambles psc on psc.play_id = ors.play_id and psc.player_id = ors.player_id
LEFT JOIN passing_sacks psa on psa.play_id = ors.play_id and psa.player_id = ors.player_id
LEFT JOIN dm_player_routes pr on pr.play_id = ors.play_id and pr.player_id = ors.player_id
LEFT JOIN receiving_targets rt on rt.play_id = ors.play_id and rt.player_id = ors.player_id
WHERE ",
league_string,
" and ps.position in ('QB','HB','WR','TE') and g.season_id = ",
season,
" and g.week_id >= 0 and g.week_id <= ",
week,
" and p.regular_type in ('P','R') and p.fake is FALSE and p.no_play is false
) a
GROUP BY a.week_id, a.franchise_id, a.player_id, a.position) b
LEFT JOIN (
SELECT a.week_id, a.franchise_id, sum(a.team_route) as team_routes
FROM (
SELECT DISTINCT ors.play_id, g.week_id, ors.franchise_id,
CASE WHEN ors.route_run = 1 and (pr.no_route is false or pr.no_route is null) and (pr.run_play is false or pr.run_play is null) and (pr.screen_block is false or pr.screen_block is null)  THEN 1 ELSE 0 END team_route
FROM offense_regular_snaps ors
INNER JOIN dm_games g on g.id = ors.game_id
INNER JOIN dm_plays p on p.id = ors.play_id
INNER JOIN dm_player_seasons ps on ps.league_id = g.league_id and ps.player_id = ors.player_id and ps.season_id = g.season_id
LEFT JOIN dm_player_routes pr on pr.play_id = ors.play_id and pr.player_id = ors.player_id
WHERE ",
league_string,
" and ps.position in ('QB','HB','WR','TE') and g.season_id = ",
season,
" and g.week_id >= 0 and g.week_id <= ",
week,
" and p.regular_type in ('P','R') and p.fake is FALSE and p.no_play is false
and CASE WHEN ors.route_run = 1 and (pr.no_route is false or pr.no_route is null) and (pr.run_play is false or pr.run_play is null) and (pr.screen_block is false or pr.screen_block is null)  THEN 1 ELSE 0 END = 1
) a
GROUP BY a.week_id, a.franchise_id) c on b.week_id = c.week_id and b.franchise_id = c.franchise_id
",
sep = ""
)
rates_with_the_ball <- dbGetQuery(galaxy, sql_statement)
rates_with_the_ball <- rates_with_the_ball %>%
mutate(across(
-all_of("position"),
~ if (is.numeric(.x)) as.integer(.x) else .x
))
rates_with_the_ball <- rates_with_the_ball %>%
mutate(across(where(is.integer), ~ replace_na(.x, 0L)))
sql_statement <- paste(
"
SELECT a.week_id, a.franchise_id, a.player_id, sum(a.snap) as snaps, sum(a.target_depth) as target_depth, sum(a.target_depth_play) as target_depth_play, ROUND(sum(a.time)::numeric,1) as time, sum(a.time_play) as time_play,
sum(rollout_pass) as rollout_pass, sum(passer) as passer, sum(first_read) as first_read, sum(checkdown) as checkdown, sum(decision_play) as decision_play
FROM (
SELECT ors.play_id, g.week_id, ors.franchise_id, ors.player_id, 1 as snap, ptd.yards as target_depth, CASE WHEN ptd.yards is not null THEN 1 ELSE 0 END as target_depth_play, ttt.time, CASE WHEN ttt.time is not null THEN 1 ELSE 0 END as time_play,
CASE WHEN p.dropback_type in ('RL','RR','RSR','RSL','RLR','RRL') THEN 1 ELSE 0 END rollout_pass, ors.passer,
CASE WHEN qbc.qb_decision = 'ONE' THEN 1 ELSE 0 END as first_read, CASE WHEN qbc.qb_decision = 'CHK' THEN 1 ELSE 0 END as checkdown, CASE WHEN qbc.qb_decision IS NOT NULL THEN 1 ELSE 0 END as decision_play
FROM offense_regular_snaps ors
INNER JOIN dm_games g on g.id = ors.game_id
INNER JOIN dm_plays p on p.id = ors.play_id
INNER JOIN dm_player_seasons ps on ps.league_id = g.league_id and ps.player_id = ors.player_id and ps.season_id = g.season_id
INNER JOIN dm_player_participations pp on pp.player_id = ors.player_id and pp.play_id = ors.play_id
LEFT JOIN passing_target_depths ptd on ptd.play_id = ors.play_id and ptd.player_id = ors.player_id
LEFT JOIN passing_times_to_throw ttt on ttt.play_id = ors.play_id and ttt.player_id = ors.player_id
LEFT JOIN dm_quarterback_chartings qbc on qbc.play_id = ors.play_id and qbc.player_id = ors.player_id
WHERE ",
league_string,
" and ps.position = 'QB' and g.season_id = ",
season,
" and g.week_id >= 0 and g.week_id <= ",
week,
" and p.regular_type in ('P','R') and p.fake is FALSE and p.no_play is FALSE
) a
GROUP BY a.week_id, a.franchise_id, a.player_id
",
sep = ""
)
qb_timing_and_location <- dbGetQuery(galaxy, sql_statement)
qb_timing_and_location <- qb_timing_and_location %>%
mutate(across(-all_of("time"), ~ if (is.numeric(.x)) as.integer(.x) else .x))
qb_timing_and_location <- qb_timing_and_location %>%
mutate(across(where(is.integer), ~ replace_na(.x, 0L)))
sql_statement <- paste(
"SELECT a.week_id, a.franchise_id, a.player_id, a.position, sum(a.snap) as snaps, sum(a.targets) as targets, sum(a.target_depth) as target_depth, sum(a.target_depth_play) as target_depth_play,
sum(a.catchable) as catchables, sum(a.accurate_throw) as accurate_throws
FROM (
SELECT ors.play_id, g.week_id, ors.franchise_id, ors.player_id, ps.position, 1 as snap, rt.target as targets, ptd.yards as target_depth, CASE WHEN ptd.yards is not null THEN 1 ELSE 0 END as target_depth_play, rc.catchable, pat.accurate_throw
FROM offense_regular_snaps ors
INNER JOIN dm_games g on g.id = ors.game_id
INNER JOIN dm_plays p on p.id = ors.play_id
INNER JOIN dm_player_seasons ps on ps.league_id = g.league_id and ps.player_id = ors.player_id and ps.season_id = g.season_id
INNER JOIN dm_player_participations pp on pp.player_id = ors.player_id and pp.play_id = ors.play_id
LEFT JOIN receiving_targets rt on rt.player_id = ors.player_id and rt.play_id = ors.play_id
LEFT JOIN passing_target_depths ptd on ptd.play_id = rt.play_id
LEFT JOIN receiving_catchables rc on rc.play_id = rt.play_id and rc.player_id = rt.player_id
LEFT JOIN passing_accurate_throws pat on pat.play_id = rt.play_id
WHERE ",
league_string,
" and ps.position in ('HB','WR','TE') and g.season_id = ",
season,
" and g.week_id >= 0 and g.week_id <= ",
week,
" and p.regular_type in ('P','R') and p.fake is FALSE and p.no_play is FALSE
) a
GROUP BY a.week_id, a.franchise_id, a.player_id, a.position",
sep = ""
)
receiver_timing_and_location <- dbGetQuery(galaxy, sql_statement)
sql_statement <- paste(
"
SELECT a.week_id, a.franchise_id, sum(a.target_depth) as team_target_depth
FROM (
SELECT rt.play_id, g.week_id, rt.franchise_id, rt.player_id, 1 as snap, rt.target as targets, ptd.yards as target_depth
FROM offense_regular_snaps ors
INNER JOIN dm_games g on g.id = ors.game_id
INNER JOIN dm_plays p on p.id = ors.play_id
INNER JOIN dm_player_seasons ps on ps.league_id = g.league_id and ps.player_id = ors.player_id and ps.season_id = g.season_id
INNER JOIN dm_player_participations pp on pp.player_id = ors.player_id and pp.play_id = ors.play_id
INNER JOIN receiving_targets rt on rt.player_id = ors.player_id and rt.play_id = ors.play_id
INNER JOIN passing_target_depths ptd on ptd.play_id = rt.play_id
WHERE ",
league_string,
" and g.season_id = ",
season,
" and g.week_id >= 0 and g.week_id <= ",
week,
" and p.regular_type in ('P','R') and p.fake is FALSE and p.no_play is FALSE
) a
GROUP BY a.week_id, a.franchise_id",
sep = ""
)
receiver_timing_and_location_team_targets <- dbGetQuery(galaxy, sql_statement)
