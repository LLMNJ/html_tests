)
rb_data$percentage <- rb_data$count / rb_data$total
rm(rb_data_totals)
rb_data$total <- NULL
#This is to get franchises
sql_statement <- paste(
"
SELECT id, name
FROM dm_franchises
"
)
franchises <- dbGetQuery(galaxy, sql_statement)
franchises <- franchises %>%
mutate(across(where(bit64::is.integer64), as.integer))
#This is to disconnect from the database
source("/home/nathan/Dropbox/901_functions/disconnect_galaxy.R")
#This is to start a loop to get stuff by team
teams <- select(rb_data, franchise_id) %>% distinct()
total <- as.numeric(nrow(teams))
count <- 1
repeat {
if (count == 1 + total) break
current_team <- teams[count, 1]
current_franchise_name <- filter(franchises, id == current_team) %>%
select(name)
current_franchise_name <- current_franchise_name[1, 1]
rb <- filter(rb_data, franchise_id == current_team)
rb$franchise_id <- NULL
graph_file_name <- paste(
"/home/nathan/Dropbox/402_graphics/Recap RB Pie/",
season,
"_",
week,
"_",
current_franchise_name,
"_running_back_usage.png",
sep = ""
)
graph_title <- paste(current_franchise_name, " Running Back Usage", sep = "")
rb_graph <-
ggplot(data = rb, aes(x = "", y = percentage, fill = running_backs)) +
scale_fill_brewer(palette = "Paired") +
theme_bw() +
labs(
y = "",
x = "",
subtitle = graph_subtitle,
title = graph_title
) +
geom_bar(stat = "identity", position = position_fill()) + #This is to color the graph
geom_text(
aes(label = count, x = 1.7),
size = 3,
position = position_fill(vjust = 0.5)
) + #This is to add text to the graph
coord_polar(theta = "y", start = 90, direction = -1) + #This makes it a pie rather than one big bar
facet_wrap(~situation) + #This is to make multiple pies rather than just one, and the field to differentiate them by
theme(
axis.text = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(size = 20, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
panel.grid = element_blank(),
legend.title = element_text(face = "bold"),
strip.text.x = element_text(face = "bold")
)
rb_graph <- rb_graph + guides(fill = guide_legend(title = "Running Back"))
rb_graph
ggsave(graph_file_name, rb_graph, height = 5, width = 8)
count <- count + 1
}
rm(
franchises,
rb,
rb_data,
rb_graph,
teams,
count,
current_franchise_name,
current_team,
graph_file_name,
graph_title,
season,
sql_statement,
total,
week,
scaleFUN,
text,
halftime,
graph_subtitle
)
source("/home/nathan/Dropbox/901_functions/Custom footer.R")
source("/home/nathan/Dropbox/901_functions/Custom header.R")
library(ggplot2)
library(ggimage)
library(scales)
#This is to pick the franchises
franchises <- data.frame(
"franchise" = c(
"",
#  "Arizona Cardinals",
# "Atlanta Falcons",
#  "Baltimore Ravens",
#  "Buffalo Bills",
#  "Carolina Panthers",
#  "Chicago Bears",
"Cincinnati Bengals",
# "Cleveland Browns",
#  "Dallas Cowboys",
"Denver Broncos"
#  "Detroit Lions",
#  "Green Bay Packers"
#  "Houston Texans",
#  "Indianapolis Colts",
#  "Jacksonville Jaguars",
#  "Kansas City Chiefs",
#  "Las Vegas Raiders"
#  "Los Angeles Chargers",
#  "Los Angeles Rams",
# "Miami Dolphins",
#  "Minnesota Vikings",
#  "New England Patriots",
# "New Orleans Saints",
#  "New York Giants",
#  "New York Jets"
# "Philadelphia Eagles",
#  "Pittsburgh Steelers",
#  "San Francisco 49ers"
#  "Seattle Seahawks",
#  "Tampa Bay Buccaneers",
# "Tennessee Titans",
#  "Washington Commanders"
)
)
sql_statement <- paste(
"SELECT pff.pff_player_identifier, f.franchise_first_name || ' ' || f.franchise_last_name as franchise
FROM a_nfl_rosters nr
INNER JOIN a_franchises f on f.franchise_id = nr.franchise_id
INNER JOIN a_link_players_pff pff on pff.player_id = nr.player_id"
)
current_rosters <- dbGetQuery(n, sql_statement)
current_rosters <- filter(
current_rosters,
current_rosters$franchise %in% franchises$franchise
)
scaleFUN <- function(x) sprintf("%.1f", x)
source("/home/nathan/Dropbox/901_functions/connect_galaxy.R")
#This is to get rb
sql_statement <- paste(
"
SELECT b.season_id, b.week_id, b.player_id, CONCAT(p.first_name,' ',p.last_name) as name, t.nickname as team, b.count / c.out_of::float as percentage
FROM (
SELECT g.season_id, g.week_id, ors.franchise_id, ors.player_id, count(*)
FROM offense_regular_snaps ors
INNER JOIN dm_games g on g.id = ors.game_id
WHERE g.league_id = 1 and g.season_id >= 2024 and g.week_id >= 1 and g.week_id <= 18
GROUP BY g.season_id, g.week_id, ors.franchise_id, ors.player_id) b
INNER JOIN (
SELECT a.season_id, a.week_id, a.franchise_id, count(*) as out_of
FROM (
SELECT distinct g.season_id, g.week_id, ors.franchise_id, ors.play_id
FROM offense_regular_snaps ors
INNER JOIN dm_games g on g.id = ors.game_id
WHERE g.league_id = 1 and g.season_id >= 2024 and g.week_id >= 1 and g.week_id <= 18
) a
GROUP BY a.season_id, a.week_id, a.franchise_id
) c on c.season_id = b.season_id and c.week_id = b.week_id and c.franchise_id = b.franchise_id
INNER JOIN dm_player_seasons ps on ps.player_id = b.player_id and ps.league_id = 1 and ps.season_id = b.season_id
INNER JOIN dm_players p on p.id = b.player_id
INNER JOIN dm_teams t on t.franchise_id = b.franchise_id and t.start_season <= 2024 and t.end_season >= 2024
WHERE ps.position in ('HB','FB','WR','TE')
"
)
snaps <- dbGetQuery(galaxy, sql_statement)
snaps <- snaps %>%
mutate(across(where(bit64::is.integer64), as.integer))
#This is to disconnect from the database
source("/home/nathan/Dropbox/901_functions/disconnect_galaxy.R")
snaps$season_week <- paste(
snaps$season_id,
ifelse(
snaps$week_id < 10,
paste("0", snaps$week_id, sep = ""),
snaps$week_id
),
sep = " "
)
team_data <- nflfastR::teams_colors_logos
team_data <- select(team_data, team_nick, team_logo_wikipedia) %>% distinct()
team_data$team_nick <- ifelse(
team_data$team_nick == "Football Team",
"Commanders",
team_data$team_nick
)
snaps <-
left_join(x = snaps, y = team_data, by = c("team" = "team_nick"))
sql_statement <- paste(
"
SELECT t.team_last_name, t.team_primary_color
FROM a_teams t
INNER JOIN a_seasons s on s.season_id = t.season_id
WHERE s.season = 2024 and t.league_id = 13
"
)
team_colors <- dbGetQuery(n, sql_statement)
team_colors$line_thickness <- 1
snaps <- left_join(
x = snaps,
y = team_colors,
by = c("team" = "team_last_name")
)
#This is to start a loop to get stuff by team
players <- select(snaps, player_id, name) %>% distinct()
players <- filter(
players,
players$player_id %in% current_rosters$pff_player_identifier
)
total <- as.numeric(nrow(players))
count <- 1
repeat {
if (count == 1 + total) break
current_player_id <- players[count, 1]
current_player_name <- players[count, 2]
player_snaps <- filter(snaps, snaps$player_id == current_player_id)
player_snap_order <- select(player_snaps, team, season_id, week_id)
player_snap_order$number <- player_snap_order$season_id *
100 +
player_snap_order$week_id
player_snap_order_pivot <- player_snap_order %>%
group_by(team) %>%
summarize(new_number = min(number))
current_teams <- select(player_snaps, team) %>% distinct()
player_team_colors <- filter(
team_colors,
team_last_name %in% current_teams$team
)
player_team_colors <- left_join(
x = player_team_colors,
y = player_snap_order_pivot,
by = c("team_last_name" = "team")
)
player_team_colors <- player_team_colors[
order(player_team_colors$new_number),
]
#  player_team_colors <- player_team_colors[order(-player_team_colors$new_number),]
graph_file_name <- paste(
"/home/nathan/Dropbox/402_graphics/Recap Snap Lines/",
"percentage_of_snaps_",
current_player_name,
".png",
sep = ""
)
graph_title <- paste(
current_player_name,
" Percentage of Offensive Snaps",
sep = ""
)
# Make a named vector, mapping team name -> color
color_map <- setNames(
player_team_colors$team_primary_color,
player_team_colors$team_last_name # or whatever column actually matches 'team' in player_snaps
)
# Likewise for line thickness
size_map <- setNames(
player_team_colors$line_thickness,
player_team_colors$team_last_name
)
player_snaps_graph <-
player_snaps %>%
ggplot(aes(x = season_week, y = percentage, group = team)) +
geom_line(aes(color = team, size = team)) +
theme_bw() +
labs(
y = "Percentage of Offensive Snaps",
x = "Season and Week",
subtitle = "",
title = graph_title
) +
scale_y_continuous(labels = scales::percent, limits = c(0, 1)) +
scale_color_manual(values = color_map) +
scale_size_manual(values = size_map) +
theme(
axis.title = element_text(size = 10),
axis.text.x = element_text(size = 8, angle = -90),
axis.text.y = element_text(size = 8),
plot.title = element_text(size = 12, hjust = 0.5),
plot.subtitle = element_text(size = 8, hjust = 0.5),
legend.position = "none"
) +
geom_image(aes(image = team_logo_wikipedia), size = 0.04)
ggsave(graph_file_name, player_snaps_graph, width = 7, height = 5)
count <- count + 1
}
rm(
players,
color_map,
size_map,
current_teams,
player_snap_order,
player_snap_order_pivot,
player_snaps,
player_snaps_graph,
player_team_colors,
snaps,
team_colors,
team_data,
count,
current_player_id,
current_player_name,
graph_file_name,
graph_title,
sql_statement,
total,
scaleFUN,
franchises,
current_rosters
)
source("/home/nathan/Dropbox/901_functions/Custom footer.R")
source("/home/nathan/Dropbox/901_functions/Custom header.R")
setwd("~/html_tests")
library(glue)
# Constants for dynamic values
league_type <- "PPR"
number_of_players <- 192
season <- 2025
week <- 4
table_title <- paste("Rest of Season Rankings Following Week ", week, sep = "")
csv_filename <- gsub("\\s+", "_", tolower(table_title))
last_updated_text <- format(
round(as.POSIXct(Sys.time(), tz = "America/New_York"), units = "mins"),
"%a %m/%d %I:%M %p"
)
url <-
"https://docs.google.com/spreadsheets/d/1KbwN3IDUxRzDx9vCMz2Xe4o3eQj7574wFCbW8VrdeFw/edit#gid=80961760"
players <- read_sheet(url, sheet = "players")
teams <- read_sheet(url, sheet = "teams")
players <- left_join(
x = players,
y = teams,
by = c("current_team" = "team_last_name...2")
)
players <- players %>%
mutate(
rank = case_when(
league_type == "PPR" ~ players$ppr_rank,
league_type == "half" ~ players$half_rank,
league_type == "standard" ~ players$standard_rank,
league_type == "superflex" ~ players$superflex_rank,
league_type == "dynasty" ~ players$dynasty_rank,
league_type == "dynasty superflex" ~ players$dynasty_superflex_rank,
league_type == "dynasty rookie" ~ players$dynasty_superflex_rank,
league_type == "dynasty rookie superflex" ~
players$dynasty_superflex_rookie_rank,
TRUE ~ players$ppr_rank
)
)
players$player_profile_url <- players$pff_player_url
players <- select(
players,
rank,
position,
name,
current_team,
player_profile_url,
url
)
players <- filter(players, players$rank <= number_of_players) %>%
arrange(rank)
# Build <tbody> rows from dataframe
rows <- apply(players, 1, function(r) {
glue(
'<tr>\n',
'  <td>{r["rank"]}</td>\n',
'  <td>{r["position"]}</td>\n',
'  <td><a href="{r["player_profile_url"]}">{r["name"]}</a></td>\n',
'  <td><a href="{r["url"]}">{r["current_team"]}</a></td>\n',
'</tr>'
)
})
tbody_html <- paste(rows, collapse = "\n")
# Construct full HTML inline
html_lines <- c(
'<!DOCTYPE html>',
'<html lang="en">',
'<html lang="en">',
'<head>',
'  <meta charset="UTF-8">',
'  <meta name="viewport" content="width=device-width, initial-scale=1">',
sprintf('  <title>%s</title>', table_title),
'  <link href="https://fonts.googleapis.com/css2?family=Archivo&display=swap" rel="stylesheet">',
'  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">',
'  <link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/dataTables.bootstrap5.min.css">',
'  <link rel="stylesheet" href="https://cdn.datatables.net/buttons/2.4.1/css/buttons.bootstrap5.min.css">',
'  <style>',
"    body, table { font-family: 'Archivo', sans-serif; }",
'    .table-responsive { overflow: visible; }',
'    #example th, #example td { text-align: center; }',
'    #example thead th { position: sticky; background-color:#f8f9fa; z-index:2; }',
'    #example thead tr:nth-child(1) th { top: 0; }',
'    #example thead tr.filter-row th { top: 36px; }', # adjust if your header is taller/shorter
'    #example .filter-row input, #example .filter-row select { width: 100%; box-sizing: border-box; text-align: center; }',
'    #example a { color: #0d6efd; text-decoration: none; }',
'    #example a:hover { text-decoration: underline; }',
'    .dataTables_filter { display: none; }',
'    .desktop-label { display: inline; }',
'    .mobile-label { display: none; }',
'    @media (max-width: 576px) {',
'      #example { table-layout: fixed; width: 100%; }',
'      #example th, #example td { font-size: 12px; padding: 2px; }',
'      #example th:nth-child(1), #example td:nth-child(1) {',
'        width: 8%; max-width: 30px; white-space: nowrap; text-align: left; padding-right: 12px;',
'      }',
'      #example th:nth-child(2), #example td:nth-child(2) {',
'        width: 10%; max-width: 35px; white-space: nowrap; text-align: left; padding-right: 12px;',
'      }',
'      #example th:nth-child(3), #example td:nth-child(3) {',
'        width: 35%; max-width: 100px; word-wrap: break-word; white-space: normal;',
'      }',
'      #example th:nth-child(4), #example td:nth-child(4) {',
'        width: 30%; max-width: 70px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;',
'      }',
'      .desktop-label { display: none; }',
'      .mobile-label { display: inline; }',
'    }',
'  </style>',
'</head>',
'<body class="p-4">',
sprintf(
'  <div id="last-updated-block" class="mb-2"><strong>Last Updated:</strong> %s ET</div>',
last_updated_text
),
'  <div class="table-responsive">',
'    <table id="example" class="table table-striped table-hover">',
'      <thead class="table-light">',
'        <tr>',
'          <th><span class="desktop-label">Rank</span><span class="mobile-label">Rk.</span></th>',
'          <th><span class="desktop-label">Position</span><span class="mobile-label">Pos.</span></th>',
'          <th>Name</th>',
'          <th>Team</th>',
'        </tr>',
'        <tr class="filter-row">',
'          <th></th>',
'          <th></th>',
'          <th><input type="text" class="form-control form-control-sm text-center" placeholder="Filter"></th>',
'          <th></th>',
'        </tr>',
'      </thead>',
'      <tbody>',
tbody_html,
'      </tbody>',
'    </table>',
'  </div>',
'  <script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>',
'  <script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>',
'  <script src="https://cdn.datatables.net/1.13.6/js/dataTables.bootstrap5.min.js"></script>',
'  <script src="https://cdn.datatables.net/buttons/2.4.1/js/dataTables.buttons.min.js"></script>',
'  <script src="https://cdn.datatables.net/buttons/2.4.1/js/buttons.bootstrap5.min.js"></script>',
'  <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>',
'  <script src="https://cdn.datatables.net/buttons/2.4.1/js/buttons.html5.min.js"></script>',
'  <script>',
'    $(document).ready(function() {',
'      var table = $("#example").DataTable({',
'        dom: "B t",',
'        autoWidth: false,',
'        columnDefs: [',
'          { targets: 0, width: "8%" },',
'          { targets: 1, width: "10%" },',
'          { targets: 2, width: "35%" },',
'          { targets: 3, width: "30%" }',
'        ],',
sprintf(
'        buttons: [{ extend: "csvHtml5", text: "Export to CSV", filename: "%s" }],',
csv_filename
),
'        paging: false, ordering: true, info: false, orderCellsTop: true',
'      });',
'      // name filter input (column 2)',
'      $(".filter-row input").on("keyup change", function() {',
'        table.column(2).search(this.value).draw();',
'      });',
'      // dropdowns for position and team',
'      function addDropdown(colIndex, placeholder) {',
'        var col = table.column(colIndex);',
'        var vals = col.data().map(function(d) { return $("<div>").html(d).text(); }).toArray();',
'        vals = Array.from(new Set(vals)).sort();',
'        var sel = $("<select class=\\"form-select form-select-sm text-center\\"></select>");',
'        sel.append($("<option>").val("").text(placeholder));',
'        $.each(vals, function(_, v) { sel.append($("<option>").val(v).text(v)); });',
'        sel.on("change", function() {',
'          col.search(this.value ? "^" + this.value + "$" : "", true, false).draw();',
'        });',
'        $("#example thead tr.filter-row th").eq(colIndex).append(sel);',
'      }',
'      addDropdown(1, "Filter");',
'      addDropdown(3, "Filter");',
'    });',
'  </script>',
'</body>',
'</html>'
)
file_name <- paste(
"~/html_tests/rest_of_season_rankings",
season,
week,
".html",
sep = "_"
)
# Write HTML and CSV to disk
writeLines(html_lines, file_name)
gert::git_add(".") # stage everything
gert::git_commit("Update HTML") # commit staged files
gert::git_push(remote = "origin")
