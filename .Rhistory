'        hideAllSections(); $(".filter-btns .btn").removeClass("active");',
'        $("#qb-totals-row,#wr-totals-row,#te-totals-row,#rb-totals-row,#rb_pre_snap-totals-row,#wr_pre_snap-totals-row,#te_pre_snap-totals-row").parent().hide();',
'      }',
'',
'      displayMode="totals"; setRootMode(displayMode);',
'',
'      (function(){',
'        try{',
'          const raw = localStorage.getItem(LS_KEY);',
'          if(!raw) return;',
'          const o = JSON.parse(raw) || {};',
'',
'          if (o.display) {',
'            displayMode = (o.display==="pcts"?"pcts":(o.display==="both"?"both":"totals"));',
'            setRootMode(displayMode);',
'          }',
'          if (Array.isArray(o.weeksSel) && o.weeksSel.length) {',
'            $(".week-btn").each(function(){',
'              const w = String($(this).data("week"));',
'              $(this).toggleClass("active", o.weeksSel.includes(w));',
'            });',
'          }',
'          if (typeof o.posShowTop === "boolean") {',
'            posShowTop = o.posShowTop;',
'            $("#pos-top10").toggleClass("active",  posShowTop);',
'            $("#pos-all").toggleClass("active",   !posShowTop);',
'          }',
'',
'          // Restore minSnaps and draw once tables exist',
'          if (Number.isFinite(+o.minSnaps) && +o.minSnaps > 0) {',
'            minSnaps = +o.minSnaps;',
'            $("#min-snaps-input").val(String(minSnaps));',
'            setTimeout(function(){ Object.values(TABLES).forEach(m => { if (m.dt) m.dt.draw(false); }); }, 0);',
'          }',
'',
'          if (o.mode === "player" && o.player) {',
'            filterMode = "player";',
'            $("#pick-player").addClass("active");',
'            $("#player-dropdown").show();',
'            $("#player-select").val(o.player);',
'            showPositionLimitControls(false);',
'          } else if (o.mode === "team" && o.team) {',
'            filterMode = "team";',
'            $("#pick-team").addClass("active");',
'            $("#team-dropdown").show();',
'            $("#team-select").val(o.team);',
'            showPositionLimitControls(false);',
'          } else if (o.mode === "position" && o.position) {',
'            filterMode = "position";',
'            $("#pick-position").addClass("active");',
'            $("#position-dropdown").show();',
'            $("#position-select").val(o.position);',
'            showPositionLimitControls(true);',
'          }',
'',
'          if (o.mobileMode==="on" || o.mobileMode==="off" || o.mobileMode==="auto"){',
'            setMobileUI(o.mobileMode);',
'          } else {',
'            applyMobileRoot();',
'          }',
'        } catch(e){}',
'      })();',
'',
'      // ===== Min Snaps filter (global DataTables hook + UI handlers) =====',
'      // Robustly read the Snaps value from the row (prefer <td class="snaps-col">)',
'      function getSnapsFromRow(meta, settings, dataIndex){',
'        const rowObj = settings.aoData[dataIndex];',
'        const tr = rowObj && rowObj.nTr;',
'        if (!tr) return NaN;',
'        // Fast path: row-level cache',
'        const ds = tr.getAttribute("data-snaps");',
'        if (ds!=null && ds!=="") {',
'          const v = parseFloat(ds);',
'          if (Number.isFinite(v)) return v;',
'        }',
'        // Fallbacks (rare)',
'        let td = tr.querySelector("td.snaps-col");',
'        if (!td) {',
'          const idx = (meta.snapTotalIdx != null) ? meta.snapTotalIdx : ((meta.firstTotalIdx != null) ? meta.firstTotalIdx : 3);',
'          td = (tr.cells && tr.cells[idx]) ? tr.cells[idx] : null;',
'        }',
'        if (!td) return NaN;',
'        const numAttr = td.getAttribute("data-num");',
'        let val = (numAttr != null && numAttr !== "" && !isNaN(numAttr)) ? parseFloat(numAttr) : NaN;',
'        if (!Number.isFinite(val)) {',
'          const txt = (td.textContent || "").replace(/,/g, "").trim();',
'          const left = txt.split("/")[0];',
'          const m = left.match(/-?\\d+(?:\\.\\d+)?/);',
'          val = m ? parseFloat(m[0]) : NaN;',
'        }',
'        // backfill cache',
'        if (Number.isFinite(val)) tr.setAttribute("data-snaps", String(val));',
'        return val;',
'      }',
'',
'      const snapThresholdFilter = function (settings, data, dataIndex) {',
'        if (!minSnaps || minSnaps <= 0) return true;',
'        const tableId = settings.nTable ? (settings.nTable.id || "") : "";',
'        const key = tableId.replace(/_table$/, "");',
'        const meta = TABLES[key];',
'        if (!meta) return true;',
'        const snaps = getSnapsFromRow(meta, settings, dataIndex);',
'        if (!Number.isFinite(snaps)) return true;', # don\'t exclude if unreadable',
'        return snaps >= minSnaps;',
'      };',
'      $.fn.dataTable.ext.search.push(snapThresholdFilter);',
'',
'      function applyMinSnapsNow(){',
'        const raw = String($("#min-snaps-input").val() || "").trim();',
'        const parsed = parseInt(raw, 10);',
'        if (Number.isFinite(parsed) && parsed >= 0) {',
'          minSnaps = parsed;',
'        } else {',
'          minSnaps = 0;',
'          $("#min-snaps-input").val("");',
'        }',
'        persistState();',
'        // Redraw all tables so the global filter runs',
'        Object.values(TABLES).forEach(m => { if (m.dt) m.dt.draw(false); });',
'        // If we are in Position view, re-apply the Top-10/All limiter after the draw',
'        if (filterMode === "position" && currentPosCat) {',
'          setTimeout(function(){',
'            applyPositionLimit(currentPosCat);',
'            (POS_TABLES[currentPosCat] || []).forEach(k => maybeApplyRowCap(TABLES[k]));',
'          }, 0);',
'        }',
'      }',
'      $("#apply-snaps-btn").on("click", applyMinSnapsNow);',
'      $("#min-snaps-input").on("keydown", function(e){ if (e.key === "Enter") { e.preventDefault(); applyMinSnapsNow(); } });',
'      $("#clear-snaps-btn").on("click", function(){ $("#min-snaps-input").val(""); minSnaps = 0; persistState(); Object.values(TABLES).forEach(m => { if (m.dt) m.dt.draw(false); }); });',
'',
'      applyFilters();',
'      // Donâ€™t compete with first filter interactions; defer cache warmup',
'      (function(){',
'        var prewarmed=false, timer=null;',
'        function run(){ if(prewarmed) return; prewarmed=true; try{ prewarmCachesLite(); }catch(e){} }',
'        function schedule(ms){ if(timer){ clearTimeout(timer); } timer=setTimeout(run, ms); }',
'        // Any interaction with filter UI postpones warmup by 4s',
'        var sel = "#snap-rates .filter-btns, #player-dropdown, #team-dropdown, #position-dropdown, #snap-rates .week-filter, #snap-rates .snap-filter, #snap-rates .toggle-btns, #snap-rates .mobile-toggle";',
'        document.querySelectorAll(sel).forEach(function(n){',
'          n.addEventListener("pointerdown", function(){ if(!prewarmed) schedule(4000); }, {passive:true});',
'          n.addEventListener("keydown", function(){ if(!prewarmed) schedule(4000); });',
'        });',
'        // First chance to warm up: a bit after full load/paint',
'        window.addEventListener("load", function(){ schedule(3500); });',
'      })();',
'',
'    });',
'  </script>',
'</div>',
'</body>',
'</html>'
)
file_name <- paste(
"~/html_tests/utilization_report",
league_id,
season,
week,
"body",
".html",
sep = "_"
)
# 4) write final HTML
writeLines(combined_html, file_name)
rm(
current_franchises,
defense_faced,
defense_faced_qb,
defense_faced_rb,
defense_faced_te,
defense_faced_team,
defense_faced_wr,
fantasy_production,
fantasy_production_qb,
fantasy_production_rb,
fantasy_production_te,
fantasy_production_team,
fantasy_production_wr,
franchises,
passing_production,
player_text,
players,
pt,
qb_snap_rates,
qb_timing_and_location,
rankings,
rates_with_ball_qb,
rates_with_ball_rb,
rates_with_ball_te,
rates_with_ball_team,
rates_with_ball_wr,
rates_with_the_ball,
rb_pre_snap,
rb_snap_rates,
receiver_timing_and_location,
receiver_timing_and_location_rb,
receiver_timing_and_location_te,
receiver_timing_and_location_team,
receiver_timing_and_location_wr,
receiving_production,
receiving_production_rb,
receiving_production_te,
receiving_production_team,
receiving_production_wr,
rk,
rushing_production,
rushing_production_qb,
rushing_production_rb,
rushing_production_team,
situational_runs,
situational_runs_qb,
situational_runs_rb,
situational_runs_team,
situational_targets,
situational_targets_rb,
situational_targets_te,
situational_targets_team,
situational_targets_wr,
split_list,
te_pre_snap,
te_snap_rates,
wr_pre_snap,
wr_snap_rates
)
rm(
can_include_rankings,
cc,
combined_html,
defense_faced_qb_body,
defense_faced_rb_body,
defense_faced_te_body,
defense_faced_team_body,
defense_faced_wr_body,
fantasy_production_qb_body,
fantasy_production_rb_body,
fantasy_production_te_body,
fantasy_production_team_body,
fantasy_production_wr_body,
file_name,
has_any_text,
league_id,
league_string,
passing_production_qb_body,
player_notes_json,
player_ranks_json,
qb_snap_rate_body,
qb_snap_rate_rows,
qb_timing_and_location_body,
qb_with_ball_body,
qb_with_ball_rows,
rb_pre_snap_body,
rb_pre_snap_rows,
rb_snap_rate_body,
rb_snap_rate_rows,
rb_with_ball_body,
rb_with_ball_rows,
receiver_timing_and_location_rb_body,
receiver_timing_and_location_te_body,
receiver_timing_and_location_team_body,
receiver_timing_and_location_wr_body,
receiving_production_rb_body,
receiving_production_te_body,
receiving_production_team_body,
receiving_production_wr_body,
rushing_production_qb_body,
rushing_production_rb_body,
rushing_production_team_body,
season,
situational_runs_qb_body,
situational_runs_rb_body,
situational_runs_team_body,
situational_targets_rb_body,
situational_targets_te_body,
situational_targets_team_body,
situational_targets_wr_body,
sql_statement,
te_pre_snap_body,
te_pre_snap_rows,
te_snap_rate_body,
te_snap_rate_rows,
te_with_ball_body,
te_with_ball_rows,
team_with_ball_body,
team_with_ball_rows,
text_cols,
unique_weeks,
url,
week,
week_buttons_js,
wr_pre_snap_body,
wr_pre_snap_rows,
wr_snap_rate_body,
wr_snap_rate_rows,
wr_with_ball_body,
wr_with_ball_rows
)
rm(
attempts_cell,
fp_games,
fp_get,
fp_metric_cells,
id_cells,
L2off,
mk_empty_ranks_json,
num_or_0,
pair_cells,
pair_cells_num_only,
pct_or_blank,
player_cell,
ratio_cells,
routes_cell,
snaps_cell,
true_routes_cell
)
gert::git_add(".") # stage everything
gert::git_commit("Update HTML") # commit staged files
gert::git_push(remote = "origin")
source("/home/nathan/Dropbox/901_functions/Custom footer.R")
source("/home/nathan/Dropbox/901_functions/Custom header.R")
setwd("~/html_tests")
library(glue)
# Constants for dynamic values
league_type <- "dynasty"
number_of_players <- 150
season <- 2025
week <- 5
table_title <- paste("Dynsaty Rankings Week ", week, sep = "")
csv_filename <- gsub("\\s+", "_", tolower(table_title))
last_updated_text <- format(
round(as.POSIXct(Sys.time(), tz = "America/New_York"), units = "mins"),
"%a %m/%d %I:%M %p"
)
url <-
"https://docs.google.com/spreadsheets/d/1KbwN3IDUxRzDx9vCMz2Xe4o3eQj7574wFCbW8VrdeFw/edit#gid=80961760"
players <- read_sheet(url, sheet = "players")
teams <- read_sheet(url, sheet = "teams")
players <- left_join(
x = players,
y = teams,
by = c("current_team" = "team_last_name...2")
)
players <- players %>%
mutate(
rank = case_when(
league_type == "PPR" ~ players$ppr_rank,
league_type == "half" ~ players$half_rank,
league_type == "standard" ~ players$standard_rank,
league_type == "superflex" ~ players$superflex_rank,
league_type == "dynasty" ~ players$dynasty_rank,
league_type == "dynasty superflex" ~ players$dynasty_superflex_rank,
league_type == "dynasty rookie" ~ players$dynasty_superflex_rank,
league_type == "dynasty rookie superflex" ~
players$dynasty_superflex_rookie_rank,
TRUE ~ players$ppr_rank
)
)
players$player_profile_url <- players$pff_player_url
players <- select(
players,
rank,
position,
name,
current_team,
player_profile_url,
url
)
players <- filter(players, players$rank <= number_of_players) %>%
arrange(rank)
# Build <tbody> rows from dataframe
rows <- apply(players, 1, function(r) {
glue(
'<tr>\n',
'  <td>{r["rank"]}</td>\n',
'  <td>{r["position"]}</td>\n',
'  <td><a href="{r["player_profile_url"]}">{r["name"]}</a></td>\n',
'  <td><a href="{r["url"]}">{r["current_team"]}</a></td>\n',
'</tr>'
)
})
tbody_html <- paste(rows, collapse = "\n")
# Construct full HTML inline
html_lines <- c(
'<!DOCTYPE html>',
'<html lang="en">',
'<html lang="en">',
'<head>',
'  <meta charset="UTF-8">',
'  <meta name="viewport" content="width=device-width, initial-scale=1">',
sprintf('  <title>%s</title>', table_title),
'  <link href="https://fonts.googleapis.com/css2?family=Archivo&display=swap" rel="stylesheet">',
'  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">',
'  <link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/dataTables.bootstrap5.min.css">',
'  <link rel="stylesheet" href="https://cdn.datatables.net/buttons/2.4.1/css/buttons.bootstrap5.min.css">',
'  <style>',
"    body, table { font-family: 'Archivo', sans-serif; }",
'    .table-responsive { overflow: visible; }',
'    #example th, #example td { text-align: center; }',
'    #example thead th { position: sticky; background-color:#f8f9fa; z-index:2; }',
'    #example thead tr:nth-child(1) th { top: 0; }',
'    #example thead tr.filter-row th { top: 36px; }', # adjust if your header is taller/shorter
'    #example .filter-row input, #example .filter-row select { width: 100%; box-sizing: border-box; text-align: center; }',
'    #example a { color: #0d6efd; text-decoration: none; }',
'    #example a:hover { text-decoration: underline; }',
'    .dataTables_filter { display: none; }',
'    .desktop-label { display: inline; }',
'    .mobile-label { display: none; }',
'    @media (max-width: 576px) {',
'      #example { table-layout: fixed; width: 100%; }',
'      #example th, #example td { font-size: 12px; padding: 2px; }',
'      #example th:nth-child(1), #example td:nth-child(1) {',
'        width: 8%; max-width: 30px; white-space: nowrap; text-align: left; padding-right: 12px;',
'      }',
'      #example th:nth-child(2), #example td:nth-child(2) {',
'        width: 10%; max-width: 35px; white-space: nowrap; text-align: left; padding-right: 12px;',
'      }',
'      #example th:nth-child(3), #example td:nth-child(3) {',
'        width: 35%; max-width: 100px; word-wrap: break-word; white-space: normal;',
'      }',
'      #example th:nth-child(4), #example td:nth-child(4) {',
'        width: 30%; max-width: 70px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;',
'      }',
'      .desktop-label { display: none; }',
'      .mobile-label { display: inline; }',
'    }',
'  </style>',
'</head>',
'<body class="p-4">',
sprintf(
'  <div id="last-updated-block" class="mb-2"><strong>Last Updated:</strong> %s ET</div>',
last_updated_text
),
'  <div class="table-responsive">',
'    <table id="example" class="table table-striped table-hover">',
'      <thead class="table-light">',
'        <tr>',
'          <th><span class="desktop-label">Rank</span><span class="mobile-label">Rk.</span></th>',
'          <th><span class="desktop-label">Position</span><span class="mobile-label">Pos.</span></th>',
'          <th>Name</th>',
'          <th>Team</th>',
'        </tr>',
'        <tr class="filter-row">',
'          <th></th>',
'          <th></th>',
'          <th><input type="text" class="form-control form-control-sm text-center" placeholder="Filter"></th>',
'          <th></th>',
'        </tr>',
'      </thead>',
'      <tbody>',
tbody_html,
'      </tbody>',
'    </table>',
'  </div>',
'  <script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>',
'  <script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>',
'  <script src="https://cdn.datatables.net/1.13.6/js/dataTables.bootstrap5.min.js"></script>',
'  <script src="https://cdn.datatables.net/buttons/2.4.1/js/dataTables.buttons.min.js"></script>',
'  <script src="https://cdn.datatables.net/buttons/2.4.1/js/buttons.bootstrap5.min.js"></script>',
'  <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>',
'  <script src="https://cdn.datatables.net/buttons/2.4.1/js/buttons.html5.min.js"></script>',
'  <script>',
'    $(document).ready(function() {',
'      var table = $("#example").DataTable({',
'        dom: "B t",',
'        autoWidth: false,',
'        columnDefs: [',
'          { targets: 0, width: "8%" },',
'          { targets: 1, width: "10%" },',
'          { targets: 2, width: "35%" },',
'          { targets: 3, width: "30%" }',
'        ],',
sprintf(
'        buttons: [{ extend: "csvHtml5", text: "Export to CSV", filename: "%s" }],',
csv_filename
),
'        paging: false, ordering: true, info: false, orderCellsTop: true',
'      });',
'      // name filter input (column 2)',
'      $(".filter-row input").on("keyup change", function() {',
'        table.column(2).search(this.value).draw();',
'      });',
'      // dropdowns for position and team',
'      function addDropdown(colIndex, placeholder) {',
'        var col = table.column(colIndex);',
'        var vals = col.data().map(function(d) { return $("<div>").html(d).text(); }).toArray();',
'        vals = Array.from(new Set(vals)).sort();',
'        var sel = $("<select class=\\"form-select form-select-sm text-center\\"></select>");',
'        sel.append($("<option>").val("").text(placeholder));',
'        $.each(vals, function(_, v) { sel.append($("<option>").val(v).text(v)); });',
'        sel.on("change", function() {',
'          col.search(this.value ? "^" + this.value + "$" : "", true, false).draw();',
'        });',
'        $("#example thead tr.filter-row th").eq(colIndex).append(sel);',
'      }',
'      addDropdown(1, "Filter");',
'      addDropdown(3, "Filter");',
'    });',
'  </script>',
'</body>',
'</html>'
)
file_name <- paste(
"~/html_tests/dynasty_rankings",
season,
week,
".html",
sep = "_"
)
# Write HTML and CSV to disk
writeLines(html_lines, file_name)
gert::git_add(".") # stage everything
gert::git_commit("Update HTML") # commit staged files
gert::git_push(remote = "origin")
