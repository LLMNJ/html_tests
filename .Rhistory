'      var table = $("#example").DataTable({',
'        dom: "B t",',
'        autoWidth: false,',
'        order: [[0, "asc"], [1, "asc"]],',
'        orderCellsTop: true,',
'        buttons: [',
'          { extend: "copyHtml5",',
sprintf('title: "%s",', table_title),
'exportOptions: { columns: ":visible", modifier: { search: "applied", order: "applied" }, format: { body: function (d) { return dtExportText(d); } } } },',
'          { extend: "csvHtml5",',
sprintf('title: "%s",', table_title),
sprintf('filename: "%s",', csv_filename),
'exportOptions: { columns: ":visible", modifier: { search: "applied", order: "applied" }, format: { body: function (d) { return dtExportText(d); } } } },',
'          { extend: "excelHtml5",',
sprintf('title: "%s",', table_title),
sprintf('filename: "%s",', csv_filename),
'exportOptions: { columns: ":visible", modifier: { search: "applied", order: "applied" }, format: { body: function (d) { return dtExportText(d); } } } },',
'          { extend: "print",',
sprintf('title: "%s",', table_title),
'messageTop: function(){ var el=document.getElementById("last-updated-block"); return el?el.textContent:""; }, exportOptions: { columns: ":visible", modifier: { search: "applied", order: "applied" }, format: { body: function (d) { return dtExportText(d); } } } },',
'          { text: "Reset Filters", action: function () {',
'              $("[data-key=\'name\']").val("");',
'              selected.pos.clear(); selected.team.clear(); selected.opp.clear(); selected.inj.clear(); selected.stat.clear(); selected.start.clear();',
'              $(".filter-dd input[type=checkbox]").prop("checked", false);',
'              setBtnText("btn-pos"); setBtnText("btn-team"); setBtnText("btn-opp");',
'              setBtnText("btn-start"); setBtnText("btn-inj"); setBtnText("btn-stat");',
'              table.search("").columns().search("");',
'              table.draw();',
'              localStorage.removeItem(stateKey);',
'              window.history.replaceState(null, "", window.location.pathname);',
'            }',
'          }',
'        ],',
'        columnDefs: [',
'          { targets: 0, orderDataType: "dom-data-order" },',
'          { targets: 6, orderDataType: "dom-data-order" },',
'          { targets: 5, type: "opp" }',
'        ],',
'        paging: false, ordering: true, info: false',
'      });',
'',
'      var stateKey = "DT_state_example";',
'      var selected = { pos:new Set(), team:new Set(), opp:new Set(), start:new Set(), inj:new Set(), stat:new Set() };',
'      function writeStateToURL(s){ var p=new URLSearchParams(); if(s.name)p.set("name",s.name); if(s.pos.length)p.set("pos",s.pos.join("|")); if(s.team.length)p.set("team",s.team.join("|")); if(s.opp.length)p.set("opp",s.opp.join("|")); if(s.start.length)p.set("start",s.start.join("|")); if(s.inj.length)p.set("inj",s.inj.join("|")); if(s.stat.length)p.set("stat",s.stat.join("|")); var q=p.toString(); var url=q?(window.location.pathname+"?"+q):window.location.pathname; window.history.replaceState(null,"",url); }',
'      function readStateFromURL(){ var p=new URLSearchParams(window.location.search); var s={}; if(p.has("name"))s.name=p.get("name"); ["pos","team","opp","start","inj","stat"].forEach(function(k){ if(p.has(k)) s[k]=p.get(k).split("|").filter(Boolean); }); return s; }',
'      function writeStateToStorage(s){ try{ localStorage.setItem(stateKey, JSON.stringify(s||{})); }catch(e){} }',
'      function readStateFromStorage(){ try{ return JSON.parse(localStorage.getItem(stateKey)||"{}")||{}; }catch(e){ return {}; } }',
'      function currentState(){ return {',
'        name: ($("[data-key=\'name\']").val()||"").trim(),',
'        pos: Array.from(selected.pos), team: Array.from(selected.team), opp: Array.from(selected.opp),',
'        start: Array.from(selected.start), inj: Array.from(selected.inj), stat: Array.from(selected.stat)',
'      }; }',
'      function persist(){ var s=currentState(); writeStateToStorage(s); writeStateToURL(s); }',
'      function applyFilters(){',
'        table.column(3).search(($("[data-key=\'name\']").val()||""));',
'        table.column(2).search(Array.from(selected.pos).map(escapeRegex).join("|"), true, false);',
'        table.column(4).search(Array.from(selected.team).map(escapeRegex).join("|"), true, false);',
'        table.column(7).search(Array.from(selected.inj).map(escapeRegex).join("|"), true, false);',
'        table.column(8).search(Array.from(selected.stat).map(escapeRegex).join("|"), true, false);',
'        table.draw();',
'        persist();',
'      }',
'      /* Start bucket + Opponent custom filters */',
'      $.fn.dataTable.ext.search.push(function(settings, data, dataIndex){',
'        if (settings.nTable !== document.getElementById("example")) return true;',
'        if (selected.start.size){',
'          var tdS = table.column(6).nodes()[dataIndex];',
'          var sec = $(tdS).data("order");',
'          if (sec !== undefined && sec !== null && sec !== ""){',
'            var b = bucketFromEpoch(sec);',
'            if (!selected.start.has(b)) return false;',
'          }',
'        }',
'        if (selected.opp.size){',
'          var tdO = table.column(5).nodes()[dataIndex];',
'          var txt = $(tdO).text().trim().replace(/^@/,"").toLowerCase();',
'          var ok = false; var arr = Array.from(selected.opp);',
'          for (var i=0; i<arr.length; i++){ if (arr[i].toLowerCase() === txt){ ok = true; break; } }',
'          if (!ok) return false;',
'        }',
'        return true;',
'      });',
'      function collectTextsForColumn(idx, normalize){',
'        var texts = table.column(idx).data().map(function(d){ return $("<div>").html(d).text(); }).toArray();',
'        var seen = {}; var out = [];',
'        texts.forEach(function(t){',
'          if(!t) return; var v = normalize?normalize(t):t; v=v.trim(); if(!v) return; if(seen[v]) return; seen[v]=true; out.push(v);',
'        });',
'        return out;',
'      }',
'      function buildCheckboxDropdown(colIndex, idBtn, _baseLabel, idMenu, values, sortFn){',
'        var wrap = $(\'<div class="dropdown filter-dd"></div>\');',
'        var btn  = $(\'<button id="\'+idBtn+\'" class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">Filter</button>\');',
'        var menu = $(\'<div id="\'+idMenu+\'" class="dropdown-menu p-2"></div>\');',
'        var vals = values || [];',
'        if (sortFn) vals.sort(sortFn); else vals.sort();',
'        vals.forEach(function(v){',
'          var safe = v.replace(/\\s+/g,"_");',
'          var row = $(\'<div class="form-check"></div>\');',
'          var cb  = $(\'<input class="form-check-input" type="checkbox" id="\'+idMenu+\'_\'+safe+\'" value="\'+v+\'">\');',
'          var lb  = $(\'<label class="form-check-label" for="\'+idMenu+\'_\'+safe+\'">\'+v+\'</label>\');',
'          row.append(cb).append(lb); menu.append(row);',
'        });',
'        wrap.append(btn).append(menu);',
'        $("#example thead tr.filter-row th").eq(colIndex).empty().append(wrap);',
'        menu.on("change","input[type=checkbox]", function(){',
'          var arr = menu.find("input:checked").map(function(){return this.value;}).get();',
'          if (idBtn==="btn-pos") { selected.pos = new Set(arr); }',
'          else if (idBtn==="btn-team") { selected.team = new Set(arr); }',
'          else if (idBtn==="btn-opp") { selected.opp = new Set(arr); }',
'          else if (idBtn==="btn-inj") { selected.inj = new Set(arr); }',
'          else if (idBtn==="btn-stat") { selected.stat = new Set(arr); }',
'          applyFilters();',
'        });',
'      }',
'      function buildStartDropdown(colIndex){',
'        var nodes = table.column(colIndex).nodes();',
'        var seen = {}; var buckets = [];',
'        nodes.each(function(td){ var sec=$(td).data("order"); var b=bucketFromEpoch(sec); if(!b||seen[b]) return; seen[b]=true; buckets.push(b); });',
'        buckets.sort(function(a,b){ return bucketOrderIndex(a)-bucketOrderIndex(b); });',
'        var wrap = $(\'<div class="dropdown filter-dd"></div>\');',
'        var btn  = $(\'<button id="btn-start" class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">Filter</button>\');',
'        var menu = $(\'<div id="menu-start" class="dropdown-menu p-2"></div>\');',
'        buckets.forEach(function(v){ var safe=v.replace(/\\s+/g,"_"); var row=$(\'<div class="form-check"></div>\'); var cb=$(\'<input class="form-check-input" type="checkbox" id="menu-start_\'+safe+\'" value="\'+v+\'">\'); var lb=$(\'<label class="form-check-label" for="menu-start_\'+safe+\'">\'+v+\'</label>\'); row.append(cb).append(lb); menu.append(row); });',
'        wrap.append(btn).append(menu);',
'        $("#example thead tr.filter-row th").eq(colIndex).empty().append(wrap);',
'        menu.on("change","input[type=checkbox]", function(){',
'          var arr = menu.find("input:checked").map(function(){return this.value;}).get();',
'          selected.start = new Set(arr);',
'          table.draw();',
'          persist();',
'        });',
'      }',
'      $("[data-key=\'name\']").on("keyup change", function(){ applyFilters(); });',
'      buildCheckboxDropdown(2, "btn-pos",  "Position", "menu-pos",  collectTextsForColumn(2));',
'      buildCheckboxDropdown(4, "btn-team", "Team",     "menu-team", collectTextsForColumn(4));',
'      buildCheckboxDropdown(5, "btn-opp",  "Opponent", "menu-opp",  collectTextsForColumn(5, function(x){ return x.replace(/^@/,""); }), function(a,b){ a=a.toLowerCase(); b=b.toLowerCase(); if(a<b) return -1; if(a>b) return 1; return 0; });',
'      buildStartDropdown(6);',
'      buildCheckboxDropdown(7, "btn-inj",  "Injury",   "menu-inj",  collectTextsForColumn(7));',
'      buildCheckboxDropdown(8, "btn-stat", "Status",   "menu-stat", collectTextsForColumn(8));',
'      /* Restore state (labels always say "Filter") */',
'      function restoreState(s){',
'        if (s.name){ $("[data-key=\'name\']").val(s.name); }',
'        ["pos","team","opp","inj","stat"].forEach(function(k){',
'          if(Array.isArray(s[k]) && s[k].length){',
'            s[k].forEach(function(v){ $("#menu-"+k+" input[value=\\""+v+"\\"]").prop("checked", true); });',
'            selected[k]=new Set(s[k]);',
'          }',
'        });',
'        if (Array.isArray(s.start) && s.start.length){',
'          s.start.forEach(function(v){ $("#menu-start input[value=\\""+v+"\\"]").prop("checked", true); });',
'          selected.start=new Set(s.start);',
'        }',
'        applyFilters();',
'      }',
'      var s = Object.assign({}, readStateFromStorage(), readStateFromURL());',
'      restoreState(s);',
'    });',
'  </script>',
'</body>',
'</html>'
)
file_name <- paste(
"~/html_tests/weekly_rankings",
current_season_input,
current_week_input,
".html",
sep = "_"
)
# Write HTML and CSV to disk
writeLines(html_lines, file_name)
gert::git_add(".") # stage everything
gert::git_commit("Update HTML") # commit staged files
gert::git_push(remote = "origin")
# Requires glue
library(glue)
setwd("~/html_tests")
table_title <- paste(
"Weekly Fantasy Rankings ",
current_season_input,
" Week ",
current_week_input,
sep = ""
)
csv_filename <- gsub("\\s+", "_", tolower(table_title))
last_updated_text <- format(
round(as.POSIXct(Sys.time(), tz = "America/New_York"), units = "mins"),
"%a %m/%d %I:%M %p"
)
# Build <tbody> rows from dataframe `article`
rows <- apply(article, 1, function(r) {
# overall rank: sort numerically; blank for K/DEF becomes large number for ordering
or_raw <- r[["overall_rank"]]
or_num <- suppressWarnings(as.numeric(or_raw))
if (is.na(or_num)) or_num <- 9999
rank_disp <- if (or_num == 9999) "" else or_raw
# position rank (numeric if present)
pr_raw <- r[["position_rank"]]
pr_num <- suppressWarnings(as.numeric(pr_raw))
if (is.na(pr_num)) pr_num <- 9999
pr_disp <- if (pr_num == 9999) "" else pr_raw
# opponent text with @ for away
ha_val <- tolower(trimws(r[["home_away"]]))
opp_txt <- if (ha_val %in% c("away", "a", "@"))
paste0("@", r[["opponent"]]) else r[["opponent"]]
# start time: round to nearest minute, show friendly text (no year), and provide numeric sort key
start_ts <- suppressWarnings(as.POSIXct(
r[["start_time_est"]],
tz = "America/New_York"
))
if (!is.na(start_ts)) start_ts <- round(start_ts, units = "mins")
start_disp <- if (is.na(start_ts)) "" else
format(start_ts, "%a %m/%d %I:%M %p")
start_order <- if (is.na(start_ts)) 9999999999 else as.numeric(start_ts)
# injuries: blank instead of NA/"NA"
inj_val <- r[["injury"]]
inj_disp <- if (is.na(inj_val) || inj_val %in% c("", "NA")) "" else inj_val
stat_val <- r[["injury_status"]]
stat_disp <- if (is.na(stat_val) || stat_val %in% c("", "NA")) "" else
stat_val
# glue row
glue(
'<tr>\n',
'  <td data-order="{or_num}">{rank_disp}</td>\n',
'  <td data-order="{pr_num}">{pr_disp}</td>\n',
'  <td>{r["position"]}</td>\n',
'  <td><a href="{r["pff_player_url"]}">{r["name"]}</a></td>\n',
'  <td><a href="{r["team_url"]}">{r["team"]}</a></td>\n',
'  <td><a href="{r["opponent_url"]}">{opp_txt}</a></td>\n',
'  <td data-order="{start_order}">{start_disp}</td>\n',
'  <td>{inj_disp}</td>\n',
'  <td>{stat_disp}</td>\n',
'</tr>'
)
})
tbody_html <- paste(rows, collapse = "\n")
# expects: last_updated_text, table_title, csv_filename, tbody_html
html_lines <- c(
'<!DOCTYPE html>',
'<html lang="en">',
'<head>',
'  <meta charset="UTF-8">',
'  <meta name="viewport" content="width=device-width, initial-scale=1">',
sprintf('  <title>%s</title>', table_title),
'  <link href="https://fonts.googleapis.com/css2?family=Archivo&display=swap" rel="stylesheet">',
'  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css">',
'  <link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/dataTables.bootstrap5.min.css">',
'  <link rel="stylesheet" href="https://cdn.datatables.net/buttons/2.4.1/css/buttons.bootstrap5.min.css">',
'  <style>',
"    body, table { font-family: 'Archivo', sans-serif; }",
'    .table-responsive { overflow-x: visible; }',
'    .dt-buttons { display: inline-flex; gap: 6px; flex-wrap: wrap; }',
'    .dt-buttons .btn { width: auto !important; display: inline-block; padding: 0.35rem 0.6rem; font-size: 0.875rem; }',
'    #example { table-layout: fixed; width: 100%; }',
'    #example th, #example td { text-align: center; padding: 0.35rem 0.35rem; font-size: 14px; }',
'    #example thead th { position: sticky; top: 0; background-color: #f8f9fa; z-index: 2; }',
'    /* Filter row layout: keep controls inside the cells */',
'    #example thead tr.filter-row th { padding: 4px 4px !important; }',
'    #example thead tr.filter-row th * { box-sizing: border-box; }',
'    #example thead .form-control { width: 100%; min-width: 0; padding: 0.2rem 0.35rem; height: 28px; font-size: 12px; }',
'    #example thead .filter-dd { width: 100%; }',
'    #example thead .filter-dd .btn {',
'      display: block; width: 100%; max-width: 100%;',
'      padding: 0.2rem 0.5rem; height: 28px; font-size: 12px; line-height: 1.1;',
'      white-space: nowrap; overflow: hidden; text-overflow: ellipsis;',
'    }',
'    #example thead .filter-dd .dropdown-toggle::after { transform: scale(0.9); }',
'    #example a { color: #0d6efd; text-decoration: none; }',
'    #example a:hover { text-decoration: underline; }',
'    .dataTables_filter { display: none; }',
'    .desktop-label { display: inline; }',
'    .mobile-label { display: none; }',
'    .filter-dd .dropdown-menu { min-width: 200px; max-height: 260px; overflow: auto; }',
'    .filter-dd .form-check { margin-bottom: 4px; }',
'    /* Mobile: let remaining columns expand; hide chosen cols; compact filters */',
'    @media (max-width: 576px) {',
'      #example { table-layout: auto; }',
'      #example col { width: auto !important; }',
'      /* Hide 1 (Overall Rank), 7 (Start), 8 (Injury), 9 (Status) incl. filter cells */',
'      #example th:nth-child(1), #example td:nth-child(1), #example thead tr.filter-row th:nth-child(1) { display: none; }',
'      #example th:nth-child(7), #example td:nth-child(7), #example thead tr.filter-row th:nth-child(7) { display: none; }',
'      #example th:nth-child(8), #example td:nth-child(8), #example thead tr.filter-row th:nth-child(8) { display: none; }',
'      #example th:nth-child(9), #example td:nth-child(9), #example thead tr.filter-row th:nth-child(9) { display: none; }',
'      #example th, #example td { font-size: 11px; padding: 2px; }',
'      /* On phones, let buttons auto-size but never overflow */',
'      #example thead .filter-dd .btn { width: auto !important; max-width: 100%; font-size: 11px; padding: 0.2rem 0.35rem; }',
'      .desktop-label { display: none; }',
'      .mobile-label { display: inline; }',
'    }',
'    /* Print: hide controls/filters and fit table */',
'    @media print {',
'      .dt-buttons, .filter-dd, .dataTables_info { display: none !important; }',
'      #example thead tr.filter-row { display: none !important; }',
'      #example { table-layout: auto !important; width: 100% !important; }',
'      #example th, #example td { font-size: 11pt; padding: 4px 6px; }',
'      #last-updated-block { margin-bottom: 8px; font-size: 12pt; }',
'    }',
'  </style>',
'</head>',
'<body class="p-4">',
sprintf(
'  <div id="last-updated-block" class="mb-2"><strong>Last Updated:</strong> %s</div>',
last_updated_text
),
'  <div class="table-responsive">',
'    <table id="example" class="table table-striped table-hover">',
'      <colgroup>',
'        <col style="width:7%;">',
'        <col style="width:7%;">',
'        <col style="width:8%;">',
'        <col style="width:22%;">',
'        <col style="width:14%;">',
'        <col style="width:14%;">',
'        <col style="width:14%;">',
'        <col style="width:7%;">',
'        <col style="width:7%;">',
'      </colgroup>',
'      <thead class="table-light">',
'        <tr>',
'          <th><span class="desktop-label">Overall Rank</span><span class="mobile-label">Rk.</span></th>',
'          <th><span class="desktop-label">Pos Rank</span><span class="mobile-label">PRk</span></th>',
'          <th><span class="desktop-label">Position</span><span class="mobile-label">Pos.</span></th>',
'          <th>Name</th>',
'          <th>Team</th>',
'          <th>Opponent</th>',
'          <th>Start (ET)</th>',
'          <th>Injury</th>',
'          <th>Status</th>',
'        </tr>',
'        <tr class="filter-row">',
'          <th></th>',
'          <th></th>',
'          <th></th>',
'          <th><input type="text" class="form-control form-control-sm text-center" placeholder="Filter" data-key="name"></th>',
'          <th></th>',
'          <th></th>',
'          <th></th>',
'          <th></th>',
'          <th></th>',
'        </tr>',
'      </thead>',
'      <tbody>',
tbody_html,
'      </tbody>',
'    </table>',
'  </div>',
'  <script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>',
'  <script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>',
'  <script src="https://cdn.datatables.net/1.13.6/js/dataTables.bootstrap5.min.js"></script>',
'  <script src="https://cdn.datatables.net/buttons/2.4.1/js/dataTables.buttons.min.js"></script>',
'  <script src="https://cdn.datatables.net/buttons/2.4.1/js/buttons.bootstrap5.min.js"></script>',
'  <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>',
'  <script src="https://cdn.datatables.net/buttons/2.4.1/js/buttons.html5.min.js"></script>',
'  <script src="https://cdn.datatables.net/buttons/2.4.1/js/buttons.print.min.js"></script>',
'  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>',
'  <script>',
'    function escapeRegex(s){ return s.replace(/[.*+?^${}()|[\\]\\\\]/g, "\\\\$&"); }',
'    function dtExportText(data){ try { return $("<div>").html(data).text().trim(); } catch(e){ return (data || "").toString().trim(); } }',
'    $.fn.dataTable.ext.order["dom-data-order"] = function (settings, col) {',
'      return this.api().column(col, {order:"index"}).nodes().map(function(td){',
'        var v = $(td).data("order");',
'        if (v === undefined || v === null || v === "") { v = $(td).text(); }',
'        if ((v+"").trim() === "") return Number.POSITIVE_INFINITY;',
'        var n = parseFloat(v);',
'        return isNaN(n) ? Number.POSITIVE_INFINITY : n;',
'      });',
'    };',
'    $.fn.dataTable.ext.type.order["opp-pre"] = function (d) {',
'      var t = $("<div>").html(d).text().trim();',
'      return t.replace(/^@/,"").toLowerCase();',
'    };',
'    function bucketFromEpoch(sec){',
'      if (!sec || isNaN(sec)) return "";',
'      var d = new Date(parseFloat(sec)*1000), tz = "America/New_York";',
'      var wd = new Intl.DateTimeFormat("en-US",{weekday:"short",timeZone:tz}).format(d);',
'      var hr = parseInt(new Intl.DateTimeFormat("en-US",{hour:"2-digit",hour12:false,timeZone:tz}).format(d),10);',
'      if (wd==="Thu") return "Thu Night";',
'      if (wd==="Fri") return "Fri";',
'      if (wd==="Sat") return "Sat";',
'      if (wd==="Sun"){ if (hr<=13) return "Sun Early"; if (hr>=15 && hr<=17) return "Sun Late"; if (hr>=19) return "Sun Night"; return "Sun Other"; }',
'      if (wd==="Mon") return "Mon Night";',
'      return wd;',
'    }',
'    function bucketOrderIndex(b){ var m={"Thu Night":1,"Fri":2,"Sat":3,"Sun Early":4,"Sun Late":5,"Sun Night":6,"Sun Other":7,"Mon Night":8}; return (b in m)?m[b]:999; }',
'    $(document).ready(function() {',
'      var table = $("#example").DataTable({',
'        dom: "B t", autoWidth: false, order: [[0,"asc"],[1,"asc"]], orderCellsTop: true,',
'        buttons: [',
'          { extend: "copyHtml5",  ',
sprintf('title:"%s",', table_title),
'exportOptions:{ columns:":visible", modifier:{search:"applied",order:"applied"}, format:{ body:dtExportText } } },',
'          { extend: "csvHtml5",   ',
sprintf('title:"%s",', table_title),
sprintf('filename:"%s",', csv_filename),
'exportOptions:{ columns:":visible", modifier:{search:"applied",order:"applied"}, format:{ body:dtExportText } } },',
'          { extend: "excelHtml5", ',
sprintf('title:"%s",', table_title),
sprintf('filename:"%s",', csv_filename),
'exportOptions:{ columns:":visible", modifier:{search:"applied",order:"applied"}, format:{ body:dtExportText } } },',
'          { extend: "print",      ',
sprintf('title:"%s",', table_title),
'messageTop:function(){var el=document.getElementById("last-updated-block");return el?el.textContent:"";}, exportOptions:{ columns:":visible", modifier:{search:"applied",order:"applied"}, format:{ body:dtExportText } } },',
'          { text:"Reset Filters", action:function(){',
'              $("[data-key=\'name\']").val("");',
'              selected.pos.clear(); selected.team.clear(); selected.opp.clear(); selected.inj.clear(); selected.stat.clear(); selected.start.clear();',
'              $(".filter-dd input[type=checkbox]").prop("checked", false);',
'              table.search("").columns().search(""); table.draw();',
'              localStorage.removeItem(stateKey); window.history.replaceState(null,"",window.location.pathname);',
'            }',
'          }',
'        ],',
'        columnDefs: [ { targets:0, orderDataType:"dom-data-order" }, { targets:6, orderDataType:"dom-data-order" }, { targets:5, type:"opp" } ],',
'        paging:false, ordering:true, info:false',
'      });',
'',
'      var stateKey="DT_state_example";',
'      var selected={ pos:new Set(), team:new Set(), opp:new Set(), start:new Set(), inj:new Set(), stat:new Set() };',
'      function writeStateToURL(s){ var p=new URLSearchParams(); if(s.name)p.set("name",s.name); ["pos","team","opp","start","inj","stat"].forEach(function(k){ if(s[k]&&s[k].length)p.set(k,s[k].join("|")); }); var q=p.toString(); var url=q?(window.location.pathname+"?"+q):window.location.pathname; window.history.replaceState(null,"",url); }',
'      function readStateFromURL(){ var p=new URLSearchParams(window.location.search); var s={}; if(p.has("name"))s.name=p.get("name"); ["pos","team","opp","start","inj","stat"].forEach(function(k){ if(p.has(k))s[k]=p.get(k).split("|").filter(Boolean); }); return s; }',
'      function writeStateToStorage(s){ try{ localStorage.setItem(stateKey, JSON.stringify(s||{})); }catch(e){} }',
'      function readStateFromStorage(){ try{ return JSON.parse(localStorage.getItem(stateKey)||"{}")||{}; }catch(e){ return {}; } }',
'      function currentState(){ return { name:($("[data-key=\'name\']").val()||"").trim(), pos:Array.from(selected.pos), team:Array.from(selected.team), opp:Array.from(selected.opp), start:Array.from(selected.start), inj:Array.from(selected.inj), stat:Array.from(selected.stat) }; }',
'      function persist(){ var s=currentState(); writeStateToStorage(s); writeStateToURL(s); }',
'      function applyFilters(){',
'        table.column(3).search(($("[data-key=\'name\']").val()||""));',
'        table.column(2).search(Array.from(selected.pos).map(escapeRegex).join("|"), true, false);',
'        table.column(4).search(Array.from(selected.team).map(escapeRegex).join("|"), true, false);',
'        table.column(7).search(Array.from(selected.inj).map(escapeRegex).join("|"), true, false);',
'        table.column(8).search(Array.from(selected.stat).map(escapeRegex).join("|"), true, false);',
'        table.draw(); persist();',
'      }',
'      /* Custom filters for Start buckets and Opponent (ignoring "@") */',
'      $.fn.dataTable.ext.search.push(function(settings, data, dataIndex){',
'        if (settings.nTable !== document.getElementById("example")) return true;',
'        if (selected.start.size){',
'          var tdS = table.column(6).nodes()[dataIndex]; var sec=$(tdS).data("order");',
'          if (sec!==undefined && sec!==null && sec!==""){ var b=bucketFromEpoch(sec); if(!selected.start.has(b)) return false; }',
'        }',
'        if (selected.opp.size){',
'          var tdO = table.column(5).nodes()[dataIndex];',
'          var txt = $(tdO).text().trim().replace(/^@/,"").toLowerCase();',
'          var ok=false; selected.opp.forEach(function(v){ if(v.toLowerCase()===txt) ok=true; });',
'          if(!ok) return false;',
'        }',
'        return true;',
'      });',
'      function collectTextsForColumn(idx, normalize){',
'        var texts = table.column(idx).data().map(function(d){ return $("<div>").html(d).text(); }).toArray();',
'        var seen={}; var out=[]; texts.forEach(function(t){ if(!t) return; var v=normalize?normalize(t):t; v=v.trim(); if(!v||seen[v]) return; seen[v]=1; out.push(v); }); return out;',
'      }',
'      function buildCheckboxDropdown(colIndex, idBtn, idMenu, values, sortFn){',
'        var wrap=$(\'<div class="dropdown filter-dd"></div>\');',
'        var btn =$(\'<button id="\'+idBtn+\'" class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">Filter</button>\');',
'        var menu=$(\'<div id="\'+idMenu+\'" class="dropdown-menu p-2"></div>\');',
'        var vals=values||[]; if (sortFn) vals.sort(sortFn); else vals.sort();',
'        vals.forEach(function(v){ var safe=v.replace(/\\s+/g,"_"); var row=$(\'<div class="form-check"></div>\'); var cb=$(\'<input class="form-check-input" type="checkbox" id="\'+idMenu+\'_\'+safe+\'" value="\'+v+\'">\'); var lb=$(\'<label class="form-check-label" for="\'+idMenu+\'_\'+safe+\'">\'+v+\'</label>\'); row.append(cb).append(lb); menu.append(row); });',
'        wrap.append(btn).append(menu); $("#example thead tr.filter-row th").eq(colIndex).empty().append(wrap);',
'        menu.on("change","input[type=checkbox]", function(){',
'          var arr=menu.find("input:checked").map(function(){return this.value;}).get();',
'          if(idBtn==="btn-pos"){ selected.pos=new Set(arr); }',
'          else if(idBtn==="btn-team"){ selected.team=new Set(arr); }',
'          else if(idBtn==="btn-opp"){ selected.opp=new Set(arr); }',
'          else if(idBtn==="btn-inj"){ selected.inj=new Set(arr); }',
'          else if(idBtn==="btn-stat"){ selected.stat=new Set(arr); }',
'          applyFilters();',
'        });',
'      }',
'      function buildStartDropdown(colIndex){',
'        var nodes=table.column(colIndex).nodes(); var seen={}; var buckets=[];',
'        nodes.each(function(td){ var sec=$(td).data("order"); var b=bucketFromEpoch(sec); if(!b||seen[b]) return; seen[b]=1; buckets.push(b); });',
'        buckets.sort(function(a,b){ return bucketOrderIndex(a)-bucketOrderIndex(b); });',
'        var wrap=$(\'<div class="dropdown filter-dd"></div>\');',
'        var btn =$(\'<button id="btn-start" class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">Filter</button>\');',
'        var menu=$(\'<div id="menu-start" class="dropdown-menu p-2"></div>\');',
'        buckets.forEach(function(v){ var safe=v.replace(/\\s+/g,"_"); var row=$(\'<div class="form-check"></div>\'); var cb=$(\'<input class="form-check-input" type="checkbox" id="menu-start_\'+safe+\'" value="\'+v+\'">\'); var lb=$(\'<label class="form-check-label" for="menu-start_\'+safe+\'">\'+v+\'</label>\'); row.append(cb).append(lb); menu.append(row); });',
'        wrap.append(btn).append(menu); $("#example thead tr.filter-row th").eq(colIndex).empty().append(wrap);',
'        menu.on("change","input[type=checkbox]", function(){',
'          var arr=menu.find("input:checked").map(function(){return this.value;}).get(); selected.start=new Set(arr); table.draw(); persist();',
'        });',
'      }',
'      $("[data-key=\'name\']").on("keyup change", function(){ applyFilters(); });',
'      buildCheckboxDropdown(2,"btn-pos","menu-pos",collectTextsForColumn(2));',
'      buildCheckboxDropdown(4,"btn-team","menu-team",collectTextsForColumn(4));',
'      buildCheckboxDropdown(5,"btn-opp","menu-opp",collectTextsForColumn(5,function(x){return x.replace(/^@/,"");}), function(a,b){ a=a.toLowerCase(); b=b.toLowerCase(); return a<b?-1:a>b?1:0; });',
'      buildStartDropdown(6);',
'      buildCheckboxDropdown(7,"btn-inj","menu-inj",collectTextsForColumn(7));',
'      buildCheckboxDropdown(8,"btn-stat","menu-stat",collectTextsForColumn(8));',
'      function restoreState(s){',
'        if(s.name){ $("[data-key=\'name\']").val(s.name); }',
'        ["pos","team","opp","inj","stat"].forEach(function(k){ if(Array.isArray(s[k])&&s[k].length){ s[k].forEach(function(v){ $("#menu-"+k+" input[value=\\""+v+"\\"]").prop("checked",true); }); selected[k]=new Set(s[k]); } });',
'        if(Array.isArray(s.start)&&s.start.length){ s.start.forEach(function(v){ $("#menu-start input[value=\\""+v+"\\"]").prop("checked",true); }); selected.start=new Set(s.start); }',
'        applyFilters();',
'      }',
'      var s=Object.assign({}, readStateFromStorage(), readStateFromURL()); restoreState(s);',
'      function writeStateToStorage(s){ try{ localStorage.setItem(stateKey, JSON.stringify(s||{})); }catch(e){} }',
'    });',
'  </script>',
'</body>',
'</html>'
)
file_name <- paste(
"~/html_tests/weekly_rankings",
current_season_input,
current_week_input,
".html",
sep = "_"
)
# Write HTML and CSV to disk
writeLines(html_lines, file_name)
gert::git_add(".") # stage everything
gert::git_commit("Update HTML") # commit staged files
gert::git_push(remote = "origin")
